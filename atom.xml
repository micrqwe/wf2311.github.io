<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王峰的个人博客</title>
  <icon>https://www.gravatar.com/avatar/1b45a1f0d115cd43a2aa6457214b0d56</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wf2311.com/"/>
  <updated>2018-01-15T13:57:36.455Z</updated>
  <id>https://www.wf2311.com/</id>
  
  <author>
    <name>王峰</name>
    <email>wf2311@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring事件的使用</title>
    <link href="https://www.wf2311.com/Spring%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>https://www.wf2311.com/Spring事件的使用.html</id>
    <published>2018-01-15T13:57:13.000Z</published>
    <updated>2018-01-15T13:57:36.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Spring 的事件(Spring Application Event)为 Bean 与 Bean 之间传递消息。一个 Bean 处理完了希望其余一个接着处理。这时我们就需要其余的一个 Bean 监听当前 Bean 所发送的事件。</p></blockquote><p>Spring 事件使用步骤如下:</p><ol><li>先自定义事件: 需要继承<code>ApplicationEvent</code> ;</li><li>定义事件监听者: 使用注解<code>@EventListener</code>或者实现<code>ApplicationListener</code>;</li><li>使用容器对事件进行发布;<h1 id="基于注解监听模式的基本用法"><a href="#基于注解监听模式的基本用法" class="headerlink" title="基于注解监听模式的基本用法"></a>基于注解监听模式的基本用法</h1>以下用一个每天的定时同步任务为例进行讲解:<h2 id="定义同步事件"><a href="#定义同步事件" class="headerlink" title="定义同步事件"></a>定义同步事件</h2><code>SyncEvent</code>:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步任务事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SyncEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="事件监听者"><a href="#事件监听者" class="headerlink" title="事件监听者"></a>事件监听者</h2><p>定义一个 MailHandler.java 在监听到事件后发送邮件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮件发送处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MailService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSycResult</span><span class="params">(SyncEvent event)</span>  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"MailHandler接收到同步结果:&#123;&#125;"</span>,event);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">"mock send sync data ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>void sendSycResult(SyncEvent event)</code>方法上使用注解<code>@EventListener</code>, 表明<code>sendSycResult</code>方法将会监听<code>SyncEvent</code>事件;</p><p><code>EventListener</code>的源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EventListener &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * classes的别名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"classes"</span>)</span><br><span class="line">Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要监听的事件类。</span></span><br><span class="line"><span class="comment"> * 如果该属性只绑定了一个监听类，那使用该注解的方法最多只能有一个参数，并且参数类型需要该属性绑定的监听类相匹配(即参数类型需是监听类或者其父类);</span></span><br><span class="line"><span class="comment"> * 如果该属性绑定了多个监听类，那使用该注解的方法不能带有任何参数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">Class&lt;?&gt;[] classes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匹配条件，SpEL表达式；</span></span><br><span class="line"><span class="comment"> * 默认为空，表示总是匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">condition</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="发布事件"><a href="#发布事件" class="headerlink" title="发布事件"></a>发布事件</h2><p><code>SyncService</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据同步服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(SyncService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncDayData</span><span class="params">(LocalDate day)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"开始同步&#123;&#125;的数据"</span>, day);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> speed = end - start;</span><br><span class="line">        log.debug(<span class="string">"&#123;&#125;的数据同步完成,耗时&#123;&#125; ms"</span>, day, speed);</span><br><span class="line">        SyncData syncData = SyncData.builder().day(day).speed(speed).data(<span class="keyword">new</span> Object()).build();</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> SyncEvent(syncData, <span class="string">"mail"</span>));</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">long</span> end2 = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">"sleep &#123;&#125; ns"</span>, end2 - end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SyncService syncService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSyncData</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">syncService.syncDayData(LocalDate.now());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试方法<code>testSyncData()</code>,得到如下结果:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-01-15 16:37:11.387 DEBUG 132812 --- [           main] c.w.s.e.s.SyncService                    : 开始同步2018-01-15的数据</span><br><span class="line">2018-01-15 16:37:12.389 DEBUG 132812 --- [           main] c.w.s.e.s.SyncService                    : 2018-01-15的数据同步完成,耗时1001 ms</span><br><span class="line">2018-01-15 16:37:12.390 DEBUG 132812 --- [           main] c.w.s.e.h.MailHandler                    : MailHandler接收到同步结果:SyncEvent(type=mail)</span><br><span class="line">2018-01-15 16:37:13.391 DEBUG 132812 --- [           main] c.w.s.e.h.MailHandler                    : mock send sync data ...</span><br><span class="line">2018-01-15 16:37:16.391 DEBUG 132812 --- [           main] c.w.s.e.s.SyncService                    : sleep 4002 ns</span><br></pre></td></tr></table></figure></p><p>由测试结果可知：在方法<code>syncDayData()</code>运行到<code>applicationEventPublisher.publishEvent(new SyncEvent(syncData))</code>后就会立即自动调用<code>void sendSycResult(SyncEvent event)</code>方法。</p><h1 id="多个事件监听者"><a href="#多个事件监听者" class="headerlink" title="多个事件监听者"></a>多个事件监听者</h1><p>如果在同步任务完成后，不仅需要发送邮件，还需要对数据进行缓存和消息推送，只需要仿照<code>MailHandler</code>,再建立相应的类。<br><code>CacheHandler</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(CacheHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheSycResult</span><span class="params">(SyncEvent event)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"CacheHandler接收到同步结果:&#123;&#125;"</span>, event.getSource());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        log.debug(<span class="string">"mock cache sync data ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>MqHandler</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MqHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushSycResult</span><span class="params">(SyncEvent event)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"MqHandler接收到同步结果:&#123;&#125;"</span>, event.getSource());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        log.debug(<span class="string">"mock push sync data ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<code>syncDayData()</code>测试方法得到如下结果:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2018-01-15 16:44:57.280 DEBUG 135208 --- [           main] c.w.s.e.s.SyncService                    : 开始同步2018-01-15的数据</span><br><span class="line">2018-01-15 16:44:58.281 DEBUG 135208 --- [           main] c.w.s.e.s.SyncService                    : 2018-01-15的数据同步完成,耗时1001 ms</span><br><span class="line">2018-01-15 16:44:58.282 DEBUG 135208 --- [           main] c.w.s.e.h.CacheHandler                   : CacheHandler接收到同步结果:SyncData(day=2018-01-15, speed=1001, data=java.lang.Object@3f9270ed)</span><br><span class="line">2018-01-15 16:45:00.282 DEBUG 135208 --- [           main] c.w.s.e.h.CacheHandler                   : mock cache sync data ...</span><br><span class="line">2018-01-15 16:45:00.282 DEBUG 135208 --- [           main] c.w.s.e.h.MailHandler                    : MailHandler接收到同步结果:SyncEvent(type=mail)</span><br><span class="line">2018-01-15 16:45:01.283 DEBUG 135208 --- [           main] c.w.s.e.h.MailHandler                    : mock send sync data ...</span><br><span class="line">2018-01-15 16:45:01.283 DEBUG 135208 --- [           main] c.w.s.e.h.MqHandler                      : MqHandler接收到同步结果:SyncData(day=2018-01-15, speed=1001, data=java.lang.Object@3f9270ed)</span><br><span class="line">2018-01-15 16:45:04.283 DEBUG 135208 --- [           main] c.w.s.e.h.MqHandler                      : mock push sync data ...</span><br><span class="line">2018-01-15 16:45:07.283 DEBUG 135208 --- [           main] c.w.s.e.s.SyncService                    : sleep 9002 ns</span><br></pre></td></tr></table></figure></p><p>由测试结果可以看出，在方法<code>syncDayData()</code>运行到<code>applicationEventPublisher.publishEvent(new SyncEvent(syncData))</code>后就会立即依次调用我们定义的多个监听者。<br>但是如果我们对邮件发送、消息推送、缓存更新的执行顺序由特定的需求怎么办？(经简单测试，在有多个监听者时，默认情况下监听者的执行顺序是安装监听者所在的类名(不是beanName)来执行的)</p><h2 id="使用-Order来指定监听者执行顺序"><a href="#使用-Order来指定监听者执行顺序" class="headerlink" title="使用@Order来指定监听者执行顺序"></a>使用<code>@Order</code>来指定监听者执行顺序</h2><p>查看<code>EventListener</code>的API文档，其中有这样一段描述：</p><blockquote><p>It is also possible to define the order in which listeners for a certain event are to be invoked. To do so, add Spring’s common @Order annotation alongside this event listener annotation.</p></blockquote><p>所以我们可以用<code>@Order</code>来配合<code>@EventListener</code>来指定多个监听者的执行顺序。<br>分别修改<br><code>MailHandler</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSycResult</span><span class="params">(SyncEvent event)</span>  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>CacheHandler</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheSycResult</span><span class="params">(SyncEvent event)</span>  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>MqHandler</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushSycResult</span><span class="params">(SyncEvent event)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上的代码为我们指定了3个监听者的依次执行顺序为: MailHandler、CacheHandler、MqHandler<br>再次运行<code>syncDayData()</code>测试方法得到如下结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">34.830</span> DEBUG <span class="number">138192</span> --- [           main] c.w.s.e.s.SyncService                    : 开始同步<span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span>的数据</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">35.831</span> DEBUG <span class="number">138192</span> --- [           main] c.w.s.e.s.SyncService                    : <span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span>的数据同步完成,耗时<span class="number">1001</span> ms</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">35.832</span> DEBUG <span class="number">138192</span> --- [           main] c.w.s.e.h.MailHandler                    : MailHandler接收到同步结果:SyncEvent(type=mail)</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">36.832</span> DEBUG <span class="number">138192</span> --- [           main] c.w.s.e.h.MailHandler                    : mock send sync data ...</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">36.832</span> DEBUG <span class="number">138192</span> --- [           main] c.w.s.e.h.CacheHandler                   : CacheHandler接收到同步结果:SyncData(day=<span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span>, speed=<span class="number">1001</span>, data=java.lang.Object@<span class="number">129</span>bd55d)</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">38.833</span> DEBUG <span class="number">138192</span> --- [           main] c.w.s.e.h.CacheHandler                   : mock cache sync data ...</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">38.833</span> DEBUG <span class="number">138192</span> --- [           main] c.w.s.e.h.MqHandler                      : MqHandler接收到同步结果:SyncData(day=<span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span>, speed=<span class="number">1001</span>, data=java.lang.Object@<span class="number">129</span>bd55d)</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">41.833</span> DEBUG <span class="number">138192</span> --- [           main] c.w.s.e.h.MqHandler                      : mock push sync data ...</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">15</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">44.834</span> DEBUG <span class="number">138192</span> --- [           main] c.w.s.e.s.SyncService                    : sleep <span class="number">9003</span> ns</span><br></pre></td></tr></table></figure></p><p>测试顺序与设置的顺序一致。</p><h1 id="基于多个监听者的链式调用"><a href="#基于多个监听者的链式调用" class="headerlink" title="基于多个监听者的链式调用"></a>基于多个监听者的链式调用</h1><p>同样是在<code>EventListener</code>的API文档中，有这样一段描述：</p><blockquote><p>Annotated methods may have a non-void return type. When they do, the result of the method invocation is sent as a new event. If the return type is either an array or a collection, each element is sent as a new individual event.</p></blockquote><p>大概意思是说: <code>EventListener</code>注解的方法，可以返回一个非空的类型。并且该方法的返回结果可以作为一个新的事件被发送。如果返回类型是数组或集合，则将每个元素作为新的单独事件发送。<br>我们可以基于此特性，实现多个监听者的链式调用。</p><ol><li><p>定义 <code>OrderInfo</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderInfo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String customer;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderTime;</span><br><span class="line">    <span class="keyword">private</span> Integer emailResultId;</span><br><span class="line">    <span class="keyword">private</span> Integer cacheResultId;</span><br><span class="line">    <span class="keyword">private</span> Integer mqResultId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>订单事件类 <code>OrderEvent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderEvent</span>  <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String nextListenerType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderEvent</span><span class="params">(Object source, String nextListenerType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.nextListenerType = nextListenerType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置订单事件监听者<br><code>MqHandler</code>中,添加:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span>(condition = <span class="string">"#event.nextListenerType == 'mq'"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderEvent <span class="title">pushOrderInfo</span><span class="params">(OrderEvent event)</span> </span>&#123;</span><br><span class="line">    log.debug(<span class="string">"MqHandler接收到订单信息:&#123;&#125;"</span>, event);</span><br><span class="line">    ((OrderInfo) event.getSource()).setMqResultId(<span class="number">1</span>);</span><br><span class="line">    log.debug(<span class="string">"mock push order event ..."</span>);</span><br><span class="line">    event.setNextListenerType(<span class="string">"cache"</span>);</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>CacheHandler</code>中,添加:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span>(condition = <span class="string">"event.nextListenerType == 'cache'"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderEvent <span class="title">cacheOrderInfo</span><span class="params">(OrderEvent event)</span> </span>&#123;</span><br><span class="line">    log.debug(<span class="string">"CacheHandler接收到订单信息:&#123;&#125;"</span>, event.getSource());</span><br><span class="line">    ((OrderInfo) event.getSource()).setCacheResultId(<span class="number">2</span>);</span><br><span class="line">    log.debug(<span class="string">"mock cache order info ..."</span>);</span><br><span class="line">    event.setNextListenerType(<span class="string">"mail"</span>);</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>MailHandler</code>中,添加:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span>(condition = <span class="string">"#event.nextListenerType == 'mail'"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderEvent <span class="title">sendOrderInfo</span><span class="params">(OrderEvent event)</span> </span>&#123;</span><br><span class="line">    log.debug(<span class="string">"MailHandler接收到订单信息:&#123;&#125;"</span>, event.getSource());</span><br><span class="line">    ((OrderInfo) event.getSource()).setMqResultId(<span class="number">3</span>);</span><br><span class="line">    log.debug(<span class="string">"mock send order event ..."</span>);</span><br><span class="line">    event.setNextListenerType(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上各个<code>EventListener</code>中的<code>condition</code>表示，只有当对应的事件中对应的自定义属性<code>nextListenerType</code>等于对应值时，才会执行该方法。</p><ol><li><p>设置事件发布者:<br><code>OrderService</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(OrderService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">(String customer, LocalDateTime time)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        OrderInfo order = OrderInfo.builder().orderTime(time).customer(customer).build();</span><br><span class="line">        log.debug(<span class="string">"保存订单信息:&#123;&#125;"</span>, order);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> OrderEvent(order, <span class="string">"mq"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrderService orderService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderInfo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">orderService.saveOrder(<span class="string">"test"</span>, LocalDateTime.now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>运行后得到如下结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2018-01-15 18:51:46.677 DEBUG 135904 --- [           main] c.w.s.e.s.OrderService                   : 保存订单信息:OrderInfo(customer=test, orderTime=2018-01-15T18:51:46.674, emailResultId=null, cacheResultId=null, mqResultId=null)</span><br><span class="line">2018-01-15 18:51:49.702 DEBUG 135904 --- [           main] c.w.s.e.h.MqHandler                      : MqHandler接收到订单信息:OrderEvent(nextListenerType=mq)</span><br><span class="line">2018-01-15 18:51:49.702 DEBUG 135904 --- [           main] c.w.s.e.h.MqHandler                      : mock push order event ...</span><br><span class="line">2018-01-15 18:51:49.703 DEBUG 135904 --- [           main] c.w.s.e.h.CacheHandler                   : CacheHandler接收到订单信息:OrderInfo(customer=test, orderTime=2018-01-15T18:51:46.674, emailResultId=null, cacheResultId=null, mqResultId=1)</span><br><span class="line">2018-01-15 18:51:49.703 DEBUG 135904 --- [           main] c.w.s.e.h.CacheHandler                   : mock cache order info ...</span><br><span class="line">2018-01-15 18:51:49.703 DEBUG 135904 --- [           main] c.w.s.e.h.MailHandler                    : MailHandler接收到订单信息:OrderInfo(customer=test, orderTime=2018-01-15T18:51:46.674, emailResultId=null, cacheResultId=2, mqResultId=1)</span><br><span class="line">2018-01-15 18:51:49.703 DEBUG 135904 --- [           main] c.w.s.e.h.MailHandler                    : mock send order event ...</span><br></pre></td></tr></table></figure></p><ol><li>结果分析：<br><code>saveOrder()</code>发布的事件中<code>event.nextListenerType</code> = ‘mq’,只有<code>pushOrderInfo()</code>方法符合条件；<br>执行完<code>pushOrderInfo()</code>后，<code>event.nextListenerType</code>变为’cache’,只有<code>cacheOrderInfo()</code>方法符合条件；<br>执行完<code>cacheOrderInfo()</code>后,<code>event.nextListenerType</code>变为’mail’,只有<code>sendOrderInfo()</code>方法符合条件；<br>执行完<code>sendOrderInfo()</code>后,<code>event.nextListenerType</code>变为null,无符合条件的事件监听者，结束事件监听；</li></ol><h1 id="基于实现ApplicationListener的事件监听者"><a href="#基于实现ApplicationListener的事件监听者" class="headerlink" title="基于实现ApplicationListener的事件监听者"></a>基于实现<code>ApplicationListener</code>的事件监听者</h1><p>参考<a href="实现ApplicationListener">Spring Application Event Example</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring 的事件(Spring Application Event)为 Bean 与 Bean 之间传递消息。
      
    
    </summary>
    
      <category term="Spring" scheme="https://www.wf2311.com/categories/Spring/"/>
    
    
      <category term="SpringBoot" scheme="https://www.wf2311.com/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://www.wf2311.com/tags/Spring/"/>
    
      <category term="ApplicationEvent" scheme="https://www.wf2311.com/tags/ApplicationEvent/"/>
    
  </entry>
  
  <entry>
    <title>有了Closeable为什么还要定义AutoCloseable</title>
    <link href="https://www.wf2311.com/%E6%9C%89%E4%BA%86Closeable%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E5%AE%9A%E4%B9%89AutoCloseable.html"/>
    <id>https://www.wf2311.com/有了Closeable为什么还要定义AutoCloseable.html</id>
    <published>2017-09-27T01:24:31.000Z</published>
    <updated>2018-01-15T13:57:36.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从try-with-resources语法块说起"><a href="#从try-with-resources语法块说起" class="headerlink" title="从try-with-resources语法块说起"></a>从<code>try-with-resources</code>语法块说起</h1><p>我们知道java7中引入了新的语法块<code>try-with-resources</code>:实现了<code>java.lang.AutoCloseable</code>的对象都可以作为<strong>资源</strong>，在<code>try</code>后面的括号类声明实例化，在后面的<code>{...}</code>语句块执行完后被自动关闭(<code>close()</code>方法被自动调用)。例如：在java7前，我们需要这样定义语句:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String path,<span class="keyword">byte</span>[] data)</span></span>&#123;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        os = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">        os.write(data);</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在java7后，可以变成这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String path,<span class="keyword">byte</span>[] data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> ( OutputStream os  = <span class="keyword">new</span> FileOutputStream(path))&#123;</span><br><span class="line">        os.write(data);</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Closeable与AutoCloseable的关系与区别"><a href="#Closeable与AutoCloseable的关系与区别" class="headerlink" title="Closeable与AutoCloseable的关系与区别"></a><code>Closeable</code>与<code>AutoCloseable</code>的关系与区别</h1><p><code>AutoCloseable</code>的源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Closeable</code>的源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Closeable</span> <span class="keyword">extends</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由上可知<code>Closeable</code>在jdk1.5中就定义了，而<code>AutoCloseable</code>在jdk1.7才被引入，并且<code>Closeable</code>继承了<code>AutoCloseable</code>。为什么要这样设计呢？答案很简单，仔细查看源码就可以知道原因:<br>因为<code>Closeable</code>的<code>close()</code>方法只会抛出<code>IOException</code>异常，而<code>AutoCloseable</code>的<code>close()</code>方法抛出的是<code>Exception</code>异常。如此一来<code>try-with-resources</code>的适用性就更大了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://stackoverflow.com/questions/19572537/why-is-autocloseable-the-base-interface-for-closeable-and-not-vice-versa" target="_blank" rel="noopener">https://stackoverflow.com/questions/19572537/why-is-autocloseable-the-base-interface-for-closeable-and-not-vice-versa</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从try-with-resources语法块说起&quot;&gt;&lt;a href=&quot;#从try-with-resources语法块说起&quot; class=&quot;headerlink&quot; title=&quot;从try-with-resources语法块说起&quot;&gt;&lt;/a&gt;从&lt;code&gt;try-wit
      
    
    </summary>
    
      <category term="Java" scheme="https://www.wf2311.com/categories/Java/"/>
    
    
      <category term="java基础" scheme="https://www.wf2311.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="io" scheme="https://www.wf2311.com/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 远程调试spring boot项目</title>
    <link href="https://www.wf2311.com/IDEA%20%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95spring%20boot%E9%A1%B9%E7%9B%AE.html"/>
    <id>https://www.wf2311.com/IDEA 远程调试spring boot项目.html</id>
    <published>2017-09-21T01:33:52.000Z</published>
    <updated>2018-01-15T13:57:36.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA-远程调试spring-boot项目"><a href="#IDEA-远程调试spring-boot项目" class="headerlink" title="IDEA 远程调试spring boot项目"></a>IDEA 远程调试spring boot项目</h1><h2 id="1-Dokcer容器中"><a href="#1-Dokcer容器中" class="headerlink" title="1. Dokcer容器中"></a>1. Dokcer容器中</h2><h3 id="在Dockefile中配置-方法1"><a href="#在Dockefile中配置-方法1" class="headerlink" title="在Dockefile中配置(方法1)"></a>在Dockefile中配置(方法1)</h3><p>在Dockerfile文件中加入参数<code>-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n</code>,<br>例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ENV JAVA_OPTS="-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n"</span><br><span class="line">ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar" ]</span><br></pre></td></tr></table></figure></p><p>启动docker命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8000:8000 -p 4000:4000 -t imageName</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li><code>-p 8000:8000</code> 表示把在Dockerfile中定义的远程调试端口8000映射到服务器端口8000中；</li><li><code>-p 4000:4000</code> 表示把在应用程序的启动端口4000映射到服务器端口4000中；<h3 id="启动命令中配置-方法2"><a href="#启动命令中配置-方法2" class="headerlink" title="启动命令中配置(方法2)"></a>启动命令中配置(方法2)</h3>在启动命令中加上参数<code>-e &quot;JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y&quot;</code>，例如：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y" -p 8000:8000 -p 4000:4000 -t imageName</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-以嵌入式web容器运行时"><a href="#2-以嵌入式web容器运行时" class="headerlink" title="2. 以嵌入式web容器运行时"></a>2. 以嵌入式web容器运行时</h2><p>在启动命令中加上参数<code>-e &quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000</code>，例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000 -jar application.jar</span><br></pre></td></tr></table></figure></p><h2 id="3-以mvn-spring-boot-run运行时"><a href="#3-以mvn-spring-boot-run运行时" class="headerlink" title="3. 以mvn spring-boot:run运行时"></a>3. 以<code>mvn spring-boot:run</code>运行时</h2><p>在pom.xml中加入如下插件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">            -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000</span><br><span class="line">        <span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://stackoverflow.com/questions/31070671/debug-spring-boot-in-docker" target="_blank" rel="noopener">debug spring-boot in docker</a></li><li><a href="https://stacktrace.tech/2017-03-21/spring-boot-idea-remote-debug/" target="_blank" rel="noopener">spring boot + IDEA 远程调试</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/examples/run-debug.html" target="_blank" rel="noopener">Spring Boot Maven Plugin - Debug the application</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IDEA-远程调试spring-boot项目&quot;&gt;&lt;a href=&quot;#IDEA-远程调试spring-boot项目&quot; class=&quot;headerlink&quot; title=&quot;IDEA 远程调试spring boot项目&quot;&gt;&lt;/a&gt;IDEA 远程调试spring boot
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.wf2311.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.wf2311.com/tags/SpringBoot/"/>
    
      <category term="远程调试" scheme="https://www.wf2311.com/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>spring boot + IDEA 远程调试</title>
    <link href="https://www.wf2311.com/spring%20boot%20+%20IDEA%20%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.html"/>
    <id>https://www.wf2311.com/spring boot + IDEA 远程调试.html</id>
    <published>2017-09-19T02:20:54.000Z</published>
    <updated>2018-01-15T13:57:36.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>若想调试远端web容器内部的应用，需要接入web容器的jvm，以Tomcat为例，需修改web容器的配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// bin\startup.bat（.sh）文件，在里面添加</span><br><span class="line"> </span><br><span class="line">// windows</span><br><span class="line">set CATALINA_OPTS="-agentlib:jdwp=transport=dt_socket,address=8888（自定义调试端口）,server=y,suspend=n %CATALINA_OPTS%"</span><br><span class="line"> </span><br><span class="line">// linux</span><br><span class="line">export CATALINA_OPTS="-agentlib:jdwp=transport=dt_socket,address= 8888（自定义调试端口）,server=y,suspend=n $CATALINA_OPTS"</span><br></pre></td></tr></table></figure></p><p>若是使用了spring boot并将工程打成了可执行JAR包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在使用java指令启动程序时需要附加额外的参数以开启外部调试，如下</span><br><span class="line">-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888（自定义调试端口）</span><br><span class="line"> </span><br><span class="line">// 完整的启动指令是类似下面酱的</span><br><span class="line">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888（自定义调试端口） -jar application.jar</span><br></pre></td></tr></table></figure></p><h1 id="IDEA连接远端调试"><a href="#IDEA连接远端调试" class="headerlink" title="IDEA连接远端调试"></a>IDEA连接远端调试</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WechatIMG2478.jpeg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WX20170321-035338@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WX20170321-035510@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>填写远端JMV所在服务器IP和调试端口号，保存即可：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WX20170321-035733@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>连接远端JVM启动调试：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/14/WX20170321-040105@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>如若连接成功，调试控制台将输出以下内容，如果没成功，请自行检查服务器防火墙以及网络<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WX20170321-040237@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>接下来的操作就和在本地调试一样了，打断点，远端JVM会通过网络同步调试信息，和在本地没什么两样，要注意调试的时候和本地一样都是会暂停JVM继续往下执行的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;p&gt;若想调试远端web容器内部的应用，需要接入web容器的jvm，以Tomcat为例，需修改web容器的配置&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.wf2311.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.wf2311.com/tags/SpringBoot/"/>
    
      <category term="远程调试" scheme="https://www.wf2311.com/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JetBrains插件推荐</title>
    <link href="https://www.wf2311.com/JetBrains%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90.html"/>
    <id>https://www.wf2311.com/JetBrains插件推荐.html</id>
    <published>2017-09-13T01:09:17.000Z</published>
    <updated>2018-01-15T13:57:36.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻译插件"><a href="#翻译插件" class="headerlink" title="翻译插件"></a>翻译插件</h1><h2 id="TranslationPlugin"><a href="#TranslationPlugin" class="headerlink" title="TranslationPlugin"></a>TranslationPlugin</h2><p>JetBrains IDE/Android Studio 翻译插件，支持中英互译、单词朗读。<br>[<a href="https://github.com/YiiGuxing/TranslationPlugin" title="项目主页" target="_blank" rel="noopener">项目主页</a>] <a href="https://github.com/YiiGuxing/TranslationPlugin" target="_blank" rel="noopener">https://github.com/YiiGuxing/TranslationPlugin</a><br>[<a href="https://plugins.jetbrains.com/idea/plugin/8579" title="插件下载地址" target="_blank" rel="noopener">插件下载地址</a>] <a href="https://plugins.jetbrains.com/idea/plugin/8579" target="_blank" rel="noopener">https://plugins.jetbrains.com/idea/plugin/8579</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/20/18/screenshots.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;翻译插件&quot;&gt;&lt;a href=&quot;#翻译插件&quot; class=&quot;headerlink&quot; title=&quot;翻译插件&quot;&gt;&lt;/a&gt;翻译插件&lt;/h1&gt;&lt;h2 id=&quot;TranslationPlugin&quot;&gt;&lt;a href=&quot;#TranslationPlugin&quot; class=&quot;he
      
    
    </summary>
    
      <category term="其它" scheme="https://www.wf2311.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="插件" scheme="https://www.wf2311.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="app" scheme="https://www.wf2311.com/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>Java的枚举类使用技巧</title>
    <link href="https://www.wf2311.com/Java%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.html"/>
    <id>https://www.wf2311.com/Java的枚举类使用技巧.html</id>
    <published>2017-08-02T06:05:07.000Z</published>
    <updated>2018-01-15T13:57:36.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举接口"><a href="#枚举接口" class="headerlink" title="枚举接口"></a>枚举接口</h1><p>在web开发中我们常常会定义一些enum来表示常量，比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BlogType &#123;</span><br><span class="line">    BLOG(<span class="number">1</span>, <span class="string">"原创博文"</span>),</span><br><span class="line">    REPRINT(<span class="number">2</span>, <span class="string">"转载文章"</span>),</span><br><span class="line">    QUESTION(<span class="number">3</span>, <span class="string">"问答"</span>),</span><br><span class="line">    VOTE(<span class="number">4</span>, <span class="string">"投票"</span>),</span><br><span class="line">    SUBJECT(<span class="number">5</span>, <span class="string">"专栏"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    BlogType(Integer code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BlogStatus &#123;</span><br><span class="line">    PRIVATE(<span class="number">1</span>, <span class="string">"自己可见"</span>),</span><br><span class="line">    FRIEND(<span class="number">2</span>, <span class="string">"好友可见"</span>),</span><br><span class="line">    ONLINE(<span class="number">3</span>, <span class="string">"登陆用户可见"</span>),</span><br><span class="line">    PUBLISH(<span class="number">4</span>, <span class="string">"公开"</span>);</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    BlogStatus(Integer code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出它们的结构一样，都有<code>code</code>和<code>name</code>这两个属性，以及对应的<code>getter</code>方法，因此可以定义一个如下的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Common</span>&lt;<span class="title">C</span>, <span class="title">N</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">C <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">N <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所有如上面的常量枚举类都可以实现该接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BlogType implements Common &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> BlogStatus implements Common &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="公用静态方法"><a href="#公用静态方法" class="headerlink" title="公用静态方法"></a>公用静态方法</h1><p>我们可以在在<code>Common</code>接口中定义一个如下的静态方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;E extends Enum&lt;E&gt; &amp; Common, C&gt; <span class="function">E <span class="title">getByCode</span><span class="params">(Class&lt;E&gt; clazz, C code)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(clazz.getEnumConstants())</span><br><span class="line">            .filter(t -&gt; t.getCode().equals(code))</span><br><span class="line">            .findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用此方法可以根据code来查找指定的<code>Common</code>实现类中的值，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(BlogType.QUESTION, Common.getByCode(BlogType.class, BlogType.QUESTION.getCode()));</span><br><span class="line">Assert.assertEquals(BlogStatus.PUBLISH, Common.getByCode(BlogType.class, BlogStatus.PUBLISH.getCode()));</span><br></pre></td></tr></table></figure></p><h1 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h1><p>当我们定义如下的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consts"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResult <span class="title">consts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApiResult result = <span class="keyword">new</span> ApiResult();</span><br><span class="line">    Map&lt;String, Object&gt; consts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    consts.put(<span class="string">"blogType"</span>, BlogType.values());</span><br><span class="line">    consts.put(<span class="string">"blogStatus"</span>, BlogStatus.values());</span><br><span class="line">    result.setData(consts);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过请求，得到的结果格式是<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"blogStatus"</span>: [</span><br><span class="line">      <span class="string">"PRIVATE"</span>,</span><br><span class="line">      <span class="string">"FRIEND"</span>,</span><br><span class="line">      <span class="string">"ONLINE"</span>,</span><br><span class="line">      <span class="string">"PUBLISH"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"blogType"</span>: [</span><br><span class="line">      <span class="string">"BLOG"</span>,</span><br><span class="line">      <span class="string">"REPRINT"</span>,</span><br><span class="line">      <span class="string">"QUESTION"</span>,</span><br><span class="line">      <span class="string">"VOTE"</span>,</span><br><span class="line">      <span class="string">"SUBJECT"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而我们期待的到是格式是包含<code>code</code>和<code>name</code>的键值对的形式，而不是以上的形式。通过在<code>Common</code>接口中添加以上方法可以实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonValue</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Map&lt;C, N&gt; <span class="title">toMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;C, N&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">    map.put(getCode(), getName());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时再次通过页面请求，得到的结果将如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"blogStatus"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"1"</span>: <span class="string">"自己可见"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"2"</span>: <span class="string">"好友可见"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"3"</span>: <span class="string">"登陆用户可见"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"4"</span>: <span class="string">"公开"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"blogType"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"1"</span>: <span class="string">"原创博文"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"2"</span>: <span class="string">"转载文章"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"3"</span>: <span class="string">"问答"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"4"</span>: <span class="string">"投票"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"5"</span>: <span class="string">"专栏"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此外，如果想通过使用<code>fastjson</code>的<code>JSON.toJSONString()</code>也能得到如上格式的结果，可以让<code>Common</code>继承<code>com.alibaba.fastjson.JSONAware</code>,并在<code>Common</code>中实现<code>JSONAware</code>的<code>toJSONString</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">toJSONString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(toMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下代码将会通过:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(<span class="string">"&#123;2:\"转载文章\"&#125;"</span>, JSON.toJSONString(BlogType.REPRINT));</span><br></pre></td></tr></table></figure></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONAware;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enums</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Common</span>&lt;<span class="title">C</span>, <span class="title">N</span>&gt; <span class="keyword">extends</span> <span class="title">JSONAware</span> </span>&#123;</span><br><span class="line">        <span class="function">C <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">N <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt; &amp; Common, C&gt; <span class="function">E <span class="title">getByCode</span><span class="params">(Class&lt;E&gt; clazz, C code)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(clazz.getEnumConstants())</span><br><span class="line">                    .filter(t -&gt; t.getCode().equals(code))</span><br><span class="line">                    .findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@JsonValue</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> Map&lt;C, N&gt; <span class="title">toMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Map&lt;C, N&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">            map.put(getCode(), getName());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> String <span class="title">toJSONString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSONString(toMap());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> BlogType implements Common &#123;</span><br><span class="line">        BLOG(<span class="number">1</span>, <span class="string">"原创博文"</span>),</span><br><span class="line">        REPRINT(<span class="number">2</span>, <span class="string">"转载文章"</span>),</span><br><span class="line">        QUESTION(<span class="number">3</span>, <span class="string">"问答"</span>),</span><br><span class="line">        VOTE(<span class="number">4</span>, <span class="string">"投票"</span>),</span><br><span class="line">        SUBJECT(<span class="number">5</span>, <span class="string">"专栏"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer code;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        BlogType(Integer code, String name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> BlogStatus implements Common &#123;</span><br><span class="line">        PRIVATE(<span class="number">1</span>, <span class="string">"自己可见"</span>),</span><br><span class="line">        FRIEND(<span class="number">2</span>, <span class="string">"好友可见"</span>),</span><br><span class="line">        ONLINE(<span class="number">3</span>, <span class="string">"登陆用户可见"</span>),</span><br><span class="line">        PUBLISH(<span class="number">4</span>, <span class="string">"公开"</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        BlogStatus(Integer code, String name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;枚举接口&quot;&gt;&lt;a href=&quot;#枚举接口&quot; class=&quot;headerlink&quot; title=&quot;枚举接口&quot;&gt;&lt;/a&gt;枚举接口&lt;/h1&gt;&lt;p&gt;在web开发中我们常常会定义一些enum来表示常量，比如:&lt;br&gt;&lt;figure class=&quot;highlight java
      
    
    </summary>
    
      <category term="Java" scheme="https://www.wf2311.com/categories/Java/"/>
    
    
      <category term="enum" scheme="https://www.wf2311.com/tags/enum/"/>
    
      <category term="json" scheme="https://www.wf2311.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Maven常用命令</title>
    <link href="https://www.wf2311.com/Maven%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://www.wf2311.com/Maven常用命令.html</id>
    <published>2017-07-28T08:49:07.000Z</published>
    <updated>2018-01-15T13:57:36.453Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>更新父模块到指定版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn versions:set -DnewVersion=1.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure></li><li><p>更新子模块版本到与模块相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -N versions:update-child-modules</span><br></pre></td></tr></table></figure></li><li><p>发布版本到指定本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy -DskipTests -DaltDeploymentRepository=wf2311-mvn-repo::default::file:D:/Projects/open-source/maven-repo/repository/</span><br></pre></td></tr></table></figure></li><li><p>跳过测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-DskipTests</span><br></pre></td></tr></table></figure></li><li><p>跳过gpg签名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-DskipGPG</span><br></pre></td></tr></table></figure></li><li><p>查看执行过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-X</span><br></pre></td></tr></table></figure></li><li><p>把jar包加入本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=D:\thrift-0.9.2.jar -DgroupId=org.apache.thrift -DartifactId=libthrift -Dversion=0.9.2 -Dpackaging=jar</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;更新父模块到指定版本号&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td
      
    
    </summary>
    
      <category term="其它" scheme="https://www.wf2311.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="maven" scheme="https://www.wf2311.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中使用thymeleaf模板在找不到对于模板的解决方法</title>
    <link href="https://www.wf2311.com/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8thymeleaf%E6%A8%A1%E6%9D%BF%E5%9C%A8%E6%89%BE%E4%B8%8D%E5%88%B0%E5%AF%B9%E4%BA%8E%E6%A8%A1%E6%9D%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
    <id>https://www.wf2311.com/SpringBoot中使用thymeleaf模板在找不到对于模板的解决方法.html</id>
    <published>2017-07-28T03:04:21.000Z</published>
    <updated>2018-01-15T13:57:36.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>SpringBoot中使用thymeleaf模板，在IDEA中以main方法运行可以正常显示页面，但在打包之后就会提示找不到模板页面的错误信息:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[THYMELEAF][http-nio-4000-exec-1] Exception processing template "/blog/index": Error resolving template "/blog/index", template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">org.thymeleaf.exceptions.TemplateInputException: Error resolving template "/blog/index", template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:870) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:353) [thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:191) [thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:59) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_74]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_74]</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_74]</span><br><span class="line">Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template "/blog/index", template might not exist or might not be accessible by any of the</span><br><span class="line"> configured Template Resolvers] with root cause</span><br><span class="line">org.thymeleaf.exceptions.TemplateInputException: Error resolving template "/blog/index", template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:870) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:353) ~[thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:191) ~[thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:59) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_74]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_74]</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_74]</span><br></pre></td></tr></table></figure></p><h1 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h1><p>参考<a href="https://stackoverflow.com/questions/26493831/spring-boot-thymeleaf-not-resolving-fragments-after-packaging#answer-26503954" title="stackflow" target="_blank" rel="noopener">stackflow</a> 类似的问题</p><blockquote><p>You don’t need the leading / on the view name, i.e. you should return fragments :: nodeList rather than /fragments :: nodeList. Having made this change Thymeleaf should be able to find the template when run from your IDE or from a jar file.<br>If you’re interested, here’s what’s happening under the hood:<br>The view name is used to search for a resource on the classpath. fragments :: nodeList means that the resource name is /templates/fragments.html and /fragments :: nodeList means that the resource name is /templates//fragments.html (note the double slash). When you’re running in your IDE the resource is available straight off the filesystem and the double slash doesn’t cause a problem. When you’re running from a jar file the resource is nested within that jar and the double slash prevents it from being found. I don’t fully understand why there’s this difference in behaviour and it is rather unfortunate. I’ve opened an issue so that we (the Spring Boot team) can see if there’s anything we can do to make the behaviour consistent.</p></blockquote><p>简单来说就是在springboot配置文件里的<code>spring.thymeleaf.prefix=classpath:/templates/</code>的与返回页面的视图设置<code>mav.setViewName(&quot;/blog/write&quot;);</code> 在组成url路径时会构成一个双斜杠<code>//</code>，在IDEA中运行时是可以被识别的，但在程序打包运行之后就不能被识别了，所以会出现这个问题。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>根据上面的错误原因分析，目前的解决办法就是让模板的路径中不会出现双斜杠<code>//</code>，或者支持双斜杠<code>//</code>路径(目前已经有人在jira中提出了该<a href="https://jira.spring.io/browse/SPR-15596" title="bug" target="_blank" rel="noopener">bug</a> 期待在之后的版本中能狗支持双斜杠<code>//</code>路径)</p><ol><li>去掉返回视图页面最前面的斜杠：<br> <code>mav.setViewName(&quot;/blog/write&quot;);</code><br> 改为<br> <code>mav.setViewName(&quot;blog/write&quot;);</code></li><li>或者在配置文件里去掉最后的斜杠：<br> <code>spring.thymeleaf.prefix=classpath:/templates/</code><br> 改为<br> <code>spring.thymeleaf.prefix=classpath:/templates</code><br> 同时需要修改thymeleaf模板文件中的相关内容，比如<br> <code>layout:decorate=&quot;~{blog/common/common}</code><br> 此时应变为<br> <code>layout:decorate=&quot;~{/blog/common/common}</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;SpringBoot中使用thymeleaf模板，在IDEA中以main方法运行可以正常显示页面，但在打包之后就会提示找不到
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.wf2311.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.wf2311.com/tags/SpringBoot/"/>
    
      <category term="thymeleaf" scheme="https://www.wf2311.com/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO源码分析之Buffer</title>
    <link href="https://www.wf2311.com/Java%20NIO%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BBuffer.html"/>
    <id>https://www.wf2311.com/Java NIO源码分析之Buffer.html</id>
    <published>2017-07-20T11:19:19.000Z</published>
    <updated>2018-01-15T13:57:36.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Buffer是特定基元类型数据的容器"><a href="#Buffer是特定基元类型数据的容器" class="headerlink" title="Buffer是特定基元类型数据的容器"></a><code>Buffer</code>是特定基元类型数据的容器</h1><p><code>Buffer</code>(缓冲区)是一种特定基元类型的线性、有限序列。除了内容之外，缓冲区的基本属性是<code>capacity</code>(容量)、<code>limit</code>(上限)和<code>position</code>(位置)以及<code>mark</code>(标记):</p><blockquote><p><code>capacity</code> 缓冲区能够容纳的数据元素的最大数量。这一容量在缓冲区创建时被设定，并且永远不能被改变。<br><code>limit</code> 缓冲区的第一个不能被读或写的元素。或者说，缓冲区中现存元素的计数。<br><code>position</code> 下一个要被读或写的元素的索引。位置会自动由相应的<code>get()</code>和<code>put()</code>函数更新。<br><code>mark</code> 一个备忘位置。调用<code>mark()</code>来设定mark = postion。调用<code>reset()</code>设定position = mark。标记在设定前是未定义的(undefined)。<br>这四个属性之间总是遵循以下关系：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> &lt;= mark &lt;= position &lt;= limit &lt;= capacity</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Buffer是特定基元类型数据的容器&quot;&gt;&lt;a href=&quot;#Buffer是特定基元类型数据的容器&quot; class=&quot;headerlink&quot; title=&quot;Buffer是特定基元类型数据的容器&quot;&gt;&lt;/a&gt;&lt;code&gt;Buffer&lt;/code&gt;是特定基元类型数据的容器&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://www.wf2311.com/categories/Java/"/>
    
    
      <category term="nio" scheme="https://www.wf2311.com/tags/nio/"/>
    
  </entry>
  
  <entry>
    <title>Git常用操作命令</title>
    <link href="https://www.wf2311.com/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html"/>
    <id>https://www.wf2311.com/Git常用操作命令.html</id>
    <published>2017-07-19T09:24:22.000Z</published>
    <updated>2018-01-15T13:57:36.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="克隆远程制定分支到本地"><a href="#克隆远程制定分支到本地" class="headerlink" title="克隆远程制定分支到本地"></a>克隆远程制定分支到本地</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;branch&gt; &lt;remote_repo&gt; ## branch为分支名，remote_repo为远程仓库</span><br></pre></td></tr></table></figure><h1 id="标签相关"><a href="#标签相关" class="headerlink" title="标签相关"></a>标签相关</h1><h2 id="切换到指定分支"><a href="#切换到指定分支" class="headerlink" title="切换到指定分支"></a>切换到指定分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure><h2 id="检出指定分支"><a href="#检出指定分支" class="headerlink" title="检出指定分支"></a>检出指定分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout tags/&lt;tag_name&gt; -b &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h2 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tagName&gt;</span><br></pre></td></tr></table></figure><h2 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;克隆远程制定分支到本地&quot;&gt;&lt;a href=&quot;#克隆远程制定分支到本地&quot; class=&quot;headerlink&quot; title=&quot;克隆远程制定分支到本地&quot;&gt;&lt;/a&gt;克隆远程制定分支到本地&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="其它" scheme="https://www.wf2311.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="git" scheme="https://www.wf2311.com/tags/git/"/>
    
      <category term="常用命令" scheme="https://www.wf2311.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>HttpServletRequest常用获取URL的方法</title>
    <link href="https://www.wf2311.com/HttpServletRequest%E5%B8%B8%E7%94%A8%E8%8E%B7%E5%8F%96URL%E7%9A%84%E6%96%B9%E6%B3%95.html"/>
    <id>https://www.wf2311.com/HttpServletRequest常用获取URL的方法.html</id>
    <published>2017-07-17T02:56:50.000Z</published>
    <updated>2018-01-15T13:57:36.451Z</updated>
    
    <content type="html"><![CDATA[<p>1、request.getRequestURL()<br>返回的是完整的url，包括Http协议，端口号，servlet名字和映射路径，但它不包含请求参数。<br>2、request.getRequestURI()<br>得到的是request URL的部分值，并且web容器没有decode过的<br>3、request.getContextPath()<br>返回 the context of the request.<br>4、request.getServletPath()<br>返回调用servlet的部分url.<br>5、request.getQueryString()<br>返回url路径后面的查询字符串  </p><p>示例：</p><pre><code>当前url：http://localhost:8080/CarsiLogCenter_new/idpstat.jsp?action=idp.sptopnrequest.getRequestURL() http://localhost:8080/CarsiLogCenter_new/idpstat.jsprequest.getRequestURI() /CarsiLogCenter_new/idpstat.jsprequest.getContextPath()/CarsiLogCenter_newrequest.getServletPath() /idpstat.jsprequest.getQueryString()action=idp.sptopn</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、request.getRequestURL()&lt;br&gt;返回的是完整的url，包括Http协议，端口号，servlet名字和映射路径，但它不包含请求参数。&lt;br&gt;2、request.getRequestURI()&lt;br&gt;得到的是request URL的部分值，并且web容
      
    
    </summary>
    
      <category term="Java Web" scheme="https://www.wf2311.com/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="https://www.wf2311.com/tags/Servlet/"/>
    
      <category term="HttpServletRequest" scheme="https://www.wf2311.com/tags/HttpServletRequest/"/>
    
      <category term="SpringMvc" scheme="https://www.wf2311.com/tags/SpringMvc/"/>
    
  </entry>
  
  <entry>
    <title>使用thymeleaf变量给onclick属性赋值</title>
    <link href="https://www.wf2311.com/%E4%BD%BF%E7%94%A8thymeleaf%E5%8F%98%E9%87%8F%E7%BB%99onclick%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC.html"/>
    <id>https://www.wf2311.com/使用thymeleaf变量给onclick属性赋值.html</id>
    <published>2017-07-15T01:47:13.000Z</published>
    <updated>2018-01-15T13:57:36.451Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在使用thymeleaf渲染页面时，遇到如下情况：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"submit('publish');"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><code>submit</code>函数的参数会根据后端参数的不同而动态改变，Google搜索到了一些类似问题，记录一下解决方法。</p><p>已经测试可用的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">th:onclick="'alert(\'' + $&#123;myVar&#125; + '\');'"</span><br></pre></td></tr></table></figure></p><p>还未测试：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">th:onclick</span>=<span class="string">"'javascript:upload(' + $&#123;gallery&#125; + ')'"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">th:onclick="|upload('$&#123;command['class'].simpleName&#125;', '$&#123;gallery&#125;')|"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:style</span>=<span class="string">"'background:url(' + @&#123;/&lt;path-to-image&gt;&#125; + ');'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在使用thymeleaf渲染页面时，遇到如下情况：&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/t
      
    
    </summary>
    
      <category term="Java Web" scheme="https://www.wf2311.com/categories/Java-Web/"/>
    
    
      <category term="thymeleaf" scheme="https://www.wf2311.com/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 优化之 index merge(索引合并)</title>
    <link href="https://www.wf2311.com/MySQL%20%E4%BC%98%E5%8C%96%E4%B9%8B%20index%20merge(%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6).html"/>
    <id>https://www.wf2311.com/MySQL 优化之 index merge(索引合并).html</id>
    <published>2017-07-14T08:09:10.000Z</published>
    <updated>2018-01-15T13:57:36.450Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>深入理解 index merge 是使用索引进行优化的重要基础之一。理解了 index merge 技术，我们才知道应该如何在表上建立索引。</p></blockquote><h1 id="1-为什么会有index-merge"><a href="#1-为什么会有index-merge" class="headerlink" title="1. 为什么会有index merge"></a>1. 为什么会有index merge</h1><p>我们的 where 中可能有多个条件(或者join)涉及到多个字段，它们之间进行 AND 或者 OR，那么此时就有可能会使用到 index merge 技术。index merge 技术如果简单的说，其实就是：对多个索引分别进行条件扫描，然后将它们各自的结果进行合并(intersect/union)。</p><p>MySQL5.0之前，一个表一次只能使用一个索引，无法同时使用多个索引分别进行条件扫描。但是从5.1开始，引入了 index merge 优化技术，对同一个表可以使用多个索引分别进行条件扫描。</p><p>相关文档：<a href="http://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html</a> (注意该文档中说的有几处错误)</p><p>The Index Merge method is used to retrieve rows with several range scans and to merge their results into one. The merge can produce unions, intersections, or unions-of-intersections of its underlying scans. This access method merges index scans from a single table; it does not merge scans across multiple tables.</p><p>In EXPLAIN output, the Index Merge method appears as index_merge in the type column. In this case, the key column contains a list of indexes used, and key_len contains a list of the longest key parts for those indexes.</p><p>index merge: 同一个表的多个索引的范围扫描可以对结果进行合并，合并方式分为三种：union, intersection, 以及它们的组合(先内部intersect然后在外面union)。</p><p>官方文档给出了四个例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> key1 = <span class="number">10</span> <span class="keyword">OR</span> key2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> (key1 = <span class="number">10</span> <span class="keyword">OR</span> key2 = <span class="number">20</span>) <span class="keyword">AND</span> non_key=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, t2 <span class="keyword">WHERE</span> (t1.key1 <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">OR</span> t1.key2 <span class="keyword">LIKE</span> <span class="string">'value%'</span>) <span class="keyword">AND</span> t2.key1=t1.some_col;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, t2 <span class="keyword">WHERE</span> t1.key1=<span class="number">1</span> <span class="keyword">AND</span> (t2.key1=t1.some_col <span class="keyword">OR</span> t2.key2=t1.some_col2);</span><br></pre></td></tr></table></figure></p><p>但是第四个例子，感觉并不会使用 index merge. 因为 t2.key1=t1.some_col 和 t2.key2=t1.some_col2 之间进行的是 OR 运算，而且 t2.key2 是复合索引的第二个字段(非第一个字段)。所以：t2.key2 = t1.some_col2 并不能使用到复合索引。(文档这里应该是错误的)</p><p>index merge 算法根据合并算法的不同分成了三种：intersect, union, sort_union. </p><h1 id="2-index-merge-之-intersect"><a href="#2-index-merge-之-intersect" class="headerlink" title="2. index merge 之 intersect"></a>2. index merge 之 intersect</h1><p>简单而言，index intersect merge就是多个索引条件扫描得到的结果进行交集运算。显然在多个索引提交之间是 AND 运算时，才会出现 index intersect merge. 下面两种where条件或者它们的组合时会进行 index intersect merge:</p><p>1) 条件使用到复合索引中的所有字段或者左前缀字段(对单字段索引也适用)</p><p>key_part1=const1 AND key_part2=const2 … AND key_partN=constN<br>2) 主键上的任何范围条件</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> innodb_table <span class="keyword">WHERE</span> primary_key &lt; <span class="number">10</span> <span class="keyword">AND</span> key_col1=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> (key1_part1=<span class="number">1</span> <span class="keyword">AND</span> key1_part2=<span class="number">2</span>) <span class="keyword">AND</span> key2=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>上面只说到复合索引，但是其实单字段索引显然也是一样的。比如 select * from tab where key1=xx and key2 =xxx; 也是有可能进行index intersect merge的。另外上面两种情况的 AND 组合也一样可能会进行 index intersect merge.</p><p>The Index Merge intersection algorithm performs simultaneous scans on all used indexes and produces the intersection of row sequences that it receives from the merged index scans. (intersect merge运行方式：多个索引同时扫描，然后结果取交集)</p><p>If all columns used in the query are covered by the used indexes, full table rows are not retrieved (EXPLAIN output contains Using index in Extra field in this case). Here is an example of such a query:(索引覆盖扫描，无需回表)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> key1=<span class="number">1</span> <span class="keyword">AND</span> key2=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>If the used indexes do not cover all columns used in the query, full rows are retrieved only when the range conditions for all used keys are satisfied.(索引不能覆盖，则对满足条件的再进行回表)</p><p>If one of the merged conditions is a condition over a primary key of an InnoDB table, it is not used for row retrieval, but is used to filter out rows retrieved using other conditions.</p><h1 id="3-index-merge-之-union"><a href="#3-index-merge-之-union" class="headerlink" title="3. index merge 之 union"></a>3. index merge 之 union</h1><p>简单而言，index uion merge就是多个索引条件扫描，对得到的结果进行并集运算，显然是多个条件之间进行的是 OR 运算。</p><p>下面几种类型的 where 条件，以及他们的组合可能会使用到 index union merge算法：</p><p>1) 条件使用到复合索引中的所有字段或者左前缀字段(对单字段索引也适用)</p><p>2) 主键上的任何范围条件</p><p>3) 任何符合 index intersect merge 的where条件；</p><p>上面三种 where 条件进行 OR 运算时，可能会使用 index union merge算法。</p><p>例子：</p><p>SELECT <em> FROM t1 WHERE key1=1 OR key2=2 OR key3=3;<br>SELECT </em> FROM innodb_table WHERE (key1=1 AND key2=2) OR (key3=’foo’ AND key4=’bar’) AND key5=5;<br>第一个例子，就是三个 单字段索引 进行 OR 运算，所以他们可能会使用 index union merge算法。</p><p>第二个例子，复杂一点。(key1=1 AND key2=2) 是符合 index intersect merge; (key3=’foo’ AND key4=’bar’) AND key5=5 也是符合index intersect merge，所以 二者之间进行 OR 运算，自然可能会使用 index union merge算法。</p><h1 id="4-index-merge-之-sort-union"><a href="#4-index-merge-之-sort-union" class="headerlink" title="4. index merge 之 sort_union"></a>4. index merge 之 sort_union</h1><p>This access algorithm is employed when the WHERE clause was converted to several range conditions combined by OR, but for which the Index Merge method union algorithm is not applicable.(多个条件扫描进行 OR 运算，但是不符合 index union merge算法的，此时可能会使用 sort_union算法)</p><p>官方文档给出了两个例子：</p><p>SELECT <em> FROM tbl_name WHERE key_col1 &lt; 10 OR key_col2 &lt; 20;<br>SELECT </em> FROM tbl_name WHERE (key_col1 &gt; 10 OR key_col2 = 20) AND nonkey_col=30;<br>但是显然：因为 key_col2 不是复合索引的第一个字段，对它进行 OR 运算，是不可能使用到索引的。所以这两个例子应该也是错误的，它们实际上并不会进行 index sort_union merge算法。</p><p>The difference between the sort-union algorithm and the union algorithm is that the sort-union algorithm must first fetch row IDs for all rows and sort them before returning any rows.(sort-union合并算法和union合并算法的不同点，在于返回结果之前是否排序，为什么需要排序呢？可能是因为两个结果集，进行并集运算，需要去重，所以才进行排序？？？)</p><h1 id="5-index-merge的局限"><a href="#5-index-merge的局限" class="headerlink" title="5. index merge的局限"></a>5. index merge的局限</h1><p>1）If your query has a complex WHERE clause with deep AND/OR nesting and MySQL does not choose the optimal plan, try distributing terms using the following identity laws:</p><p>(x AND y) OR z = (x OR z) AND (y OR z)<br>(x OR y) AND z = (x AND z) OR (y AND z)<br>如果我们的条件比较复杂，用到多个 and / or 条件运算，而MySQL没有使用最优的执行计划，那么可以使用上面的两个等式将条件进行转换一下。</p><p>2）Index Merge is not applicable to full-text indexes. We plan to extend it to cover these in a future MySQL release.(全文索引没有index merge)</p><p>3）Before MySQL 5.6.6, if a range scan is possible on some key, the optimizer will not consider using Index Merge Union or Index Merge Sort-Union algorithms. For example, consider this query:</p><p>SELECT * FROM t1 WHERE (goodkey1 &lt; 10 OR goodkey2 &lt; 20) AND badkey &lt; 30;<br>For this query, two plans are possible:</p><p>An Index Merge scan using the (goodkey1 &lt; 10 OR goodkey2 &lt; 20) condition.</p><p>A range scan using the badkey &lt; 30 condition.</p><p>However, the optimizer considers only the second plan.</p><p>这一点对以低版本的MySQL是一个很大的缺陷。就是如果where条件中有 &gt;, &lt;, &gt;=, &lt;=等条件，那么优化器不会使用 index merge，而且还会忽略其他的索引，不会使用它们，哪怕他们的选择性更优。</p><h1 id="6-对-index-merge-的进一步优化"><a href="#6-对-index-merge-的进一步优化" class="headerlink" title="6. 对 index merge 的进一步优化"></a>6. 对 index merge 的进一步优化</h1><p>index merge使得我们可以使用到多个索引同时进行扫描，然后将结果进行合并。听起来好像是很好的功能，但是如果出现了 index intersect merge，那么一般同时也意味着我们的索引建立得不太合理，因为 index intersect merge 是可以通过建立 复合索引进行更一步优化的。</p><p>比如下面的select:</p><p>SELECT * FROM t1 WHERE key1=1 AND key2=2 AND key3=3;<br>显然我们是可以在这三个字段上建立一个复合索引来进行优化的，这样就只需要扫描一个索引一次，而不是对三个所以分别扫描一次。</p><p>percona官网有一篇 比较复合索引和index merge 的好文章：Multi Column indexes vs Index Merge</p><h1 id="7-复合索引的最左前缀原则"><a href="#7-复合索引的最左前缀原则" class="headerlink" title="7. 复合索引的最左前缀原则"></a>7. 复合索引的最左前缀原则</h1><p>上面我们说到，对复合索引的非最左前缀字段进行 OR 运算，是无法使用到复合索引的。比如：</p><p>SELECT * FROM tbl_name WHERE (key_col1 &gt; 10 OR key_col2 = 20) AND nonkey_col=30;<br>其原因是，MySQL中的索引，使用的是B+tree, 也就是说他是：先按照复合索引的 第一个字段的大小来排序，插入到 B+tree 中的，当第一个字段值相同时，在按照第二个字段的值比较来插入的。那么如果我们需要对： OR key_col2 = 20 这样的条件也使用复合索引，那么该怎么操作呢？应该要对复合索引进行全扫描，找出所有 key_col2 =20 的项，然后还要回表去判断 nonkey_col=30，显然代价太大了。所以一般而言 OR key_col2 = 20 这样的条件是无法使用到复合索引的。如果一定要使用索引，那么可以在 col2 上单独建立一个索引。</p><p>复合索引的最左前缀原则：</p><p>MySQL中的复合索引，查询时只会使用到最左前缀，比如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    mysql&gt; show index from role_goods;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">    | Table      | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |</span><br><span class="line">    +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">    | role_goods |          0 | PRIMARY  |            1 | id          | A         |       22816 |     NULL | NULL   |      | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId   |            1 | roleId      | A         |        1521 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | goodsId  |            1 | goodsId     | A         |        1521 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId_2 |            1 | roleId      | A         |        1901 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId_2 |            2 | status      | A         |        4563 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId_2 |            3 | number      | A         |       22816 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>上面有一个复合索引：roleId_2(roleId,status,number)，如果条件是： where roleId=xxx and number=xxx，那么此时只会使用到最左前缀roleId，而不会使用到 number 来进行过滤。因为它们中间存在一个字段 status 没有出现在where条件中。实验如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> explain select * from role_goods where roleId=100000001 and status=1 and number=1 limit 1;</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------------+------+-------+</span><br><span class="line">| id | select_type | table      | type | possible_keys   | key      | key_len | ref               | rows | Extra |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId,roleId_2 | roleId_2 | 23      | const,const,const |   13 | NULL  |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------------+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> explain select * from role_goods where roleId=100000001 and status=1 limit 1;</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------+------+-------+</span><br><span class="line">| id | select_type | table      | type | possible_keys   | key      | key_len | ref         | rows | Extra |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId,roleId_2 | roleId_2 | 14      | const,const |   13 | NULL  |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> explain select * from role_goods where roleId=100000001 and number=1 limit 1;</span><br><span class="line">+----+-------------+------------+------+-----------------+--------+---------+-------+------+-------------+</span><br><span class="line">| id | select_type | table      | type | possible_keys   | key    | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+------------+------+-----------------+--------+---------+-------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId,roleId_2 | roleId | 9       | const |   14 | Using where |</span><br><span class="line">+----+-------------+------------+------+-----------------+--------+---------+-------+------+-------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"><span class="meta">mysql&gt;</span> explain select * from role_goods ignore index(roleId) where roleId=100000001 and number=1 limit 1;</span><br><span class="line">+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">| id | select_type | table      | type | possible_keys | key      | key_len | ref   | rows | Extra                 |</span><br><span class="line">+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId_2      | roleId_2 | 9       | const |   14 | Using index condition |</span><br><span class="line">+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>可以看到 <code>key_len</code> 的变化：</p><p>显然最后一个查询仅仅使用到符合索引中的 roleId, 没有使用到 number. number使用在了 index conditon(也就是索引的push down技术)</p><p>注意最左前缀，并不是是指：一定要按照各个字段出现在where中的顺序来建立复合索引的。比如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where status=2 and roleId=xxx and number = xxx</span><br></pre></td></tr></table></figure></p><p>该条件建立符合索引，我们并不需要按照status,roleId，number它们出现的顺序来建立索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> role_goods <span class="keyword">add</span> <span class="keyword">index</span> <span class="keyword">sin</span>(<span class="keyword">status</span>,roleId,<span class="built_in">number</span>)</span><br></pre></td></tr></table></figure></p><p>这是对最左前缀极大的误解。因为 <code>where status=2 and roleId=xxx and number = xxx 和 where roleId=xxx and number = xxx and status=2</code>它们是等价的。复合索引，哪个字段放在最前面，需要根据哪个字段经常出现在where条件中，哪个字段的选择性最好来判断的。</p><p>进一步可以参考的文章：</p><p><a href="http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/" title="http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/" target="_blank" rel="noopener">http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/</a></p><p><a href="http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html" title="http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html" target="_blank" rel="noopener">http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;深入理解 index merge 是使用索引进行优化的重要基础之一。理解了 index merge 技术，我们才知道应该如何在表上建立索引。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-为什么会有index-merge&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="数据库" scheme="https://www.wf2311.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://www.wf2311.com/tags/MySQL/"/>
    
      <category term="索引" scheme="https://www.wf2311.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>测试markdown语法</title>
    <link href="https://www.wf2311.com/%E6%B5%8B%E8%AF%95markdown%E8%AF%AD%E6%B3%95.html"/>
    <id>https://www.wf2311.com/测试markdown语法.html</id>
    <published>2017-07-14T08:01:18.000Z</published>
    <updated>2018-01-15T13:57:36.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用马克飞象"><a href="#欢迎使用马克飞象" class="headerlink" title="欢迎使用马克飞象"></a>欢迎使用马克飞象</h1><p>@(Pro)[马克飞象, 帮助, Markdown]</p><p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p><ul><li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li><li><strong>得心应手</strong> ：简洁高效的编辑器，提供<a href="http://maxiang.info/client_zh" target="_blank" rel="noopener">桌面客户端</a>以及<a href="https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop" target="_blank" rel="noopener">离线Chrome App</a>，支持移动端 Web；</li><li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li></ul><hr><p>[TOC]</p><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="noopener">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Ctrl + /</code>查看帮助。 </p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure><h3 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 USD</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 USD</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 USD</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;end</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>以及时序图:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>想了解更多，请查看<strong>流程图</strong><a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">语法</a>以及<strong>时序图</strong><a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">语法</a>。</p></blockquote><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p><ul><li style="list-style: none"><input type="checkbox" checked> 已完成事项</li><li style="list-style: none"><input type="checkbox"> 待办事项1</li><li style="list-style: none"><input type="checkbox"> 待办事项2</li></ul><blockquote><p><strong>注意：</strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p></blockquote><h2 id="印象笔记相关"><a href="#印象笔记相关" class="headerlink" title="印象笔记相关"></a>印象笔记相关</h2><h3 id="笔记本和标签"><a href="#笔记本和标签" class="headerlink" title="笔记本和标签"></a>笔记本和标签</h3><p><strong>马克飞象</strong>增加了<code>@(笔记本)[标签A|标签B]</code>语法, 以选择笔记本和添加标签。 <strong>绑定账号后</strong>， 输入<code>(</code>自动会出现笔记本列表，请从中选择。</p><h3 id="笔记标题"><a href="#笔记标题" class="headerlink" title="笔记标题"></a>笔记标题</h3><p><strong>马克飞象</strong>会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 <code>欢迎使用马克飞象</code>。</p><h3 id="快捷编辑"><a href="#快捷编辑" class="headerlink" title="快捷编辑"></a>快捷编辑</h3><p>保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到<strong>马克飞象</strong>中打开并编辑该笔记。</p><blockquote><p><strong>注意：</strong>目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。</p></blockquote><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p><strong>马克飞象</strong>通过<strong>将Markdown原文以隐藏内容保存在笔记中</strong>的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。</p><blockquote><p><strong>隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。</strong></p></blockquote><h3 id="离线存储"><a href="#离线存储" class="headerlink" title="离线存储"></a>离线存储</h3><p><strong>马克飞象</strong>使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过<code>文档管理</code>打开。</p><blockquote><p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，<strong>请务必经常及时同步到印象笔记</strong>。</p></blockquote><h2 id="编辑器相关"><a href="#编辑器相关" class="headerlink" title="编辑器相关"></a>编辑器相关</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>右侧系统菜单（快捷键<code>Ctrl + M</code>）的<code>设置</code>中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>帮助    <code>Ctrl + /</code><br>同步文档    <code>Ctrl + S</code><br>创建文档    <code>Ctrl + Alt + N</code><br>最大化编辑器    <code>Ctrl + Enter</code><br>预览文档 <code>Ctrl + Alt + Enter</code><br>文档管理    <code>Ctrl + O</code><br>系统菜单    <code>Ctrl + M</code> </p><p>加粗    <code>Ctrl + B</code><br>插入图片    <code>Ctrl + G</code><br>插入链接    <code>Ctrl + L</code><br>提升标题    <code>Ctrl + H</code></p><h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul><li>微博：<a href="http://weibo.com/u/2788354117" target="_blank" rel="noopener">@马克飞象</a>，<a href="http://weibo.com/ggock" title="开发者个人账号" target="_blank" rel="noopener">@GGock</a></li><li>邮箱：<a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x68;&#x75;&#115;&#116;&#x67;&#111;&#99;&#107;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#x68;&#x75;&#115;&#116;&#x67;&#111;&#99;&#107;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></li></ul><hr><p>感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。</p><p>[^demo]: 这是一个示例脚注。请查阅 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes" target="_blank" rel="noopener">MultiMarkdown 文档</a> 关于脚注的说明。 <strong>限制：</strong> 印象笔记的笔记内容使用 <a href="https://dev.yinxiang.com/doc/articles/enml.php" target="_blank" rel="noopener">ENML</a> 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欢迎使用马克飞象&quot;&gt;&lt;a href=&quot;#欢迎使用马克飞象&quot; class=&quot;headerlink&quot; title=&quot;欢迎使用马克飞象&quot;&gt;&lt;/a&gt;欢迎使用马克飞象&lt;/h1&gt;&lt;p&gt;@(Pro)[马克飞象, 帮助, Markdown]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;马克飞象
      
    
    </summary>
    
      <category term="其它" scheme="https://www.wf2311.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="test" scheme="https://www.wf2311.com/tags/test/"/>
    
      <category term="Markdown" scheme="https://www.wf2311.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>在SpringBoot里面使用thymeleaf3</title>
    <link href="https://www.wf2311.com/%E5%9C%A8SpringBoot%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8thymeleaf3.html"/>
    <id>https://www.wf2311.com/在SpringBoot里面使用thymeleaf3.html</id>
    <published>2017-05-26T01:53:26.000Z</published>
    <updated>2018-01-15T13:57:36.450Z</updated>
    
    <content type="html"><![CDATA[<p>最近在一个<code>springboot</code>项目里使用<code>thymeleaf</code>模板，访问页面时一直报错。而之前的项目中没发现过这种情况发生。<br>和之前的项目对比发现，在<code>springboot</code>项目中引入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>引入的<code>thymeleaf</code>版本居然是<code>2.x.x</code>版本，之前项目引入的是<code>3.x.x</code>版本的<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/26/10/QQ截图20170526100433.png" alt="之前项目" title="">                </div>                <div class="image-caption">之前项目</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/26/10/QQ截图20170526100404.png" alt="该项目" title="">                </div>                <div class="image-caption">该项目</div>            </figure></p><p>查看相应的pom文件发现，<code>thymeleaf.version</code>确实是<code>2.x.x</code>的。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/26/10/QQ截图20170526095909.png" alt="截图" title="">                </div>                <div class="image-caption">截图</div>            </figure><br>究竟怎么回事呢？搜索<code>springboot</code>文档中相关<code>thymeleaf</code>的段落，发现了如下<a href="http://docs.spring.io/spring-boot/docs/1.5.3.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3" target="_blank" rel="noopener">描述</a>:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/26/10/QQ截图20170526100534.png" alt="描述" title="">                </div>                <div class="image-caption">描述</div>            </figure></p><p>原来在<code>spring-boot-starter-thymeleaf</code>中默认引入的版本<code>thymeleaf</code>是<code>2.1</code>,如果需要使用<code>thymeleaf3</code>,需要在<code>pom.xml</code>中加入如下配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在一个&lt;code&gt;springboot&lt;/code&gt;项目里使用&lt;code&gt;thymeleaf&lt;/code&gt;模板，访问页面时一直报错。而之前的项目中没发现过这种情况发生。&lt;br&gt;和之前的项目对比发现，在&lt;code&gt;springboot&lt;/code&gt;项目中引入&lt;br&gt;&lt;fi
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://www.wf2311.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://www.wf2311.com/tags/SpringBoot/"/>
    
      <category term="thymeleaf" scheme="https://www.wf2311.com/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Runnable实现资源共享</title>
    <link href="https://www.wf2311.com/Runnable%E5%AE%9E%E7%8E%B0%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB.html"/>
    <id>https://www.wf2311.com/Runnable实现资源共享.html</id>
    <published>2017-05-25T09:03:18.000Z</published>
    <updated>2018-01-15T13:57:36.449Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="http://www.cnblogs.com/skywang12345/p/3479063.html" target="_blank" rel="noopener">参考地址</a></strong></p><p>以抢票或秒杀为例</p><ol><li>错误示例1：</li></ol><ul><li><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> remain = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" 剩余："</span> + <span class="keyword">this</span>.remain--);</span><br><span class="line">            count.addAndGet(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line"></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(service);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">return</span> service.count.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i] = buy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> a = Arrays.stream(array).filter(i -&gt; i &gt; <span class="number">100</span>).count();</span><br><span class="line">        System.out.println(<span class="string">"执行次数大于100的个数："</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/25/17/QQ截图20170525171025.png" alt="截图" title="">                </div>                <div class="image-caption">截图</div>            </figure><p>执行100次中出现了13次下单次数大于100次的情况</p><ul><li>原因分析:<br>在上述方法中，多个线程共享一个变量，会存在并发争抢资源的问题，可能多买票的现象。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3479063.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考地址&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以抢票或秒杀为例&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://www.wf2311.com/categories/Java/"/>
    
    
      <category term="thread" scheme="https://www.wf2311.com/tags/thread/"/>
    
      <category term="java" scheme="https://www.wf2311.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>jquery checkbox选中、改变状态、change和click事件</title>
    <link href="https://www.wf2311.com/jquery%20checkbox%E9%80%89%E4%B8%AD%E3%80%81%E6%94%B9%E5%8F%98%E7%8A%B6%E6%80%81%E3%80%81change%E5%92%8Cclick%E4%BA%8B%E4%BB%B6.html"/>
    <id>https://www.wf2311.com/jquery checkbox选中、改变状态、change和click事件.html</id>
    <published>2017-05-25T02:55:13.000Z</published>
    <updated>2018-01-15T13:57:36.449Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/zqifa/p/jquery-checkbox-1.html" target="_blank" rel="noopener">原文</a></p><ul><li><p>jquery判断checked的三种方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.attr(<span class="string">'checked'</span>); <span class="comment">//看版本1.6+返回:”checked”或”undefined” ;1.5-返回:true或false</span></span><br><span class="line">.prop(<span class="string">'checked'</span>); <span class="comment">//1.6+:true/false</span></span><br><span class="line">.is(<span class="string">':checked'</span>); <span class="comment">//所有版本:true/false//别忘记冒号哦</span></span><br></pre></td></tr></table></figure></li><li><p>jquery赋值checked的几种写法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的jquery版本都可以这样赋值:</span></span><br><span class="line">$(<span class="string">"#cb1"</span>).attr(<span class="string">"checked"</span>, <span class="string">"checked"</span>);</span><br><span class="line">$(<span class="string">"#cb1"</span>).attr(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//jquery1.6+:prop的4种赋值:</span></span><br><span class="line">$(<span class="string">"#cb1"</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line">$(<span class="string">"#cb1"</span>).prop(&#123;<span class="attr">checked</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">$(<span class="string">"#cb1"</span>).prop(<span class="string">"checked"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//函数返回true或false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//记得还有这种哦:</span></span><br><span class="line">$(<span class="string">"#cb1″).prop("</span>checked<span class="string">","</span>checked<span class="string">");</span></span><br></pre></td></tr></table></figure></li><li><p>checkbox click和change事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1:</span></span><br><span class="line">$(<span class="string">"#ischange"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"checked"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2:</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($.browser.msie) &#123;</span><br><span class="line">        $(<span class="string">'input:checkbox'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.blur();</span><br><span class="line">            <span class="keyword">this</span>.focus();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3：</span></span><br><span class="line">$(<span class="string">"#ischange"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"checked"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法4:</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($.browser.msie) &#123;</span><br><span class="line">        $(<span class="string">'input:checkbox'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.blur();</span><br><span class="line">            <span class="keyword">this</span>.focus();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法5:</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"testCheckbox"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"Option changed!"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/zqifa/p/jquery-checkbox-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;jquery判断checked的三种方
      
    
    </summary>
    
      <category term="前端" scheme="https://www.wf2311.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jquery" scheme="https://www.wf2311.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>nginx出现413 Request Entity Too Large 解决方法</title>
    <link href="https://www.wf2311.com/nginx%E5%87%BA%E7%8E%B0413%20Request%20Entity%20Too%20Large%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
    <id>https://www.wf2311.com/nginx出现413 Request Entity Too Large 解决方法.html</id>
    <published>2017-05-24T07:50:14.000Z</published>
    <updated>2018-01-15T13:57:36.449Z</updated>
    
    <content type="html"><![CDATA[<p><strong>nginx.conf</strong>中默认没有设置<code>client_max_body_size</code>，这个参数默认只是1M，<br>解决办法：<br>增加如下两行到<strong>nginx.conf</strong>的<code>http{}</code>段， 增大nginx上传文件大小限制<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>设置允许发布内容为8M</span><br><span class="line">client_max_body_size 8M;</span><br><span class="line">client_body_buffer_size 128k;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;nginx.conf&lt;/strong&gt;中默认没有设置&lt;code&gt;client_max_body_size&lt;/code&gt;，这个参数默认只是1M，&lt;br&gt;解决办法：&lt;br&gt;增加如下两行到&lt;strong&gt;nginx.conf&lt;/strong&gt;的&lt;code&gt;http
      
    
    </summary>
    
      <category term="其它" scheme="https://www.wf2311.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="nginx" scheme="https://www.wf2311.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>水仙花算法</title>
    <link href="https://www.wf2311.com/%E6%B0%B4%E4%BB%99%E8%8A%B1%E7%AE%97%E6%B3%95.html"/>
    <id>https://www.wf2311.com/水仙花算法.html</id>
    <published>2017-05-23T03:24:15.000Z</published>
    <updated>2018-01-15T13:57:36.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><blockquote><p>水仙花数是一个n(&gt;=3)位数字的数,它等于每个数字的n次幂之和 列如153分别是1 5 3 这几个数的立方之和</p></blockquote><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算从100到endNum范围内的水仙花数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] narcissisticNumber(<span class="keyword">int</span> endNum) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> IntStream.range(<span class="number">100</span>, endNum).parallel()</span><br><span class="line">            <span class="comment">//判断n是否为水仙花数</span></span><br><span class="line">            .filter(n -&gt; isNarcissistic(n))</span><br><span class="line">            <span class="comment">//得到结 果作为数值返回</span></span><br><span class="line">            .toArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断一个整数是否是水仙花数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNarcissistic</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//切割整数</span></span><br><span class="line">    String[] array = String.valueOf(n).split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">int</span> sum = Arrays.stream(array)</span><br><span class="line">            <span class="comment">//n次方</span></span><br><span class="line">            .mapToInt(i -&gt; nPower(Integer.valueOf(i), array.length))</span><br><span class="line">            <span class="comment">//求和</span></span><br><span class="line">            .sum();</span><br><span class="line">    <span class="keyword">return</span> sum == n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算n次方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nPower</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sum *= i;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算1_0000_0000以内的水仙花数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] ints = narcissisticNumber(<span class="number">1_0000_0000</span>);</span><br><span class="line">    Arrays.stream(ints).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">153</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">407</span><br><span class="line">1634</span><br><span class="line">8208</span><br><span class="line">9474</span><br><span class="line">54748</span><br><span class="line">92727</span><br><span class="line">93084</span><br><span class="line">548834</span><br><span class="line">1741725</span><br><span class="line">4210818</span><br><span class="line">9800817</span><br><span class="line">9926315</span><br><span class="line">24678050</span><br><span class="line">24678051</span><br><span class="line">88593477</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法描述&quot;&gt;&lt;a href=&quot;#算法描述&quot; class=&quot;headerlink&quot; title=&quot;算法描述&quot;&gt;&lt;/a&gt;算法描述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;水仙花数是一个n(&amp;gt;=3)位数字的数,它等于每个数字的n次幂之和 列如153分别是1 5 3
      
    
    </summary>
    
      <category term="Java" scheme="https://www.wf2311.com/categories/Java/"/>
    
    
      <category term="java8" scheme="https://www.wf2311.com/tags/java8/"/>
    
      <category term="算法" scheme="https://www.wf2311.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>java8中利用Stream过滤属性重复的元素</title>
    <link href="https://www.wf2311.com/java8%E4%B8%AD%E5%88%A9%E7%94%A8Stream%E8%BF%87%E6%BB%A4%E5%B1%9E%E6%80%A7%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0.html"/>
    <id>https://www.wf2311.com/java8中利用Stream过滤属性重复的元素.html</id>
    <published>2017-05-23T03:10:08.000Z</published>
    <updated>2018-01-15T13:57:36.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根据属性过滤重复的元素"><a href="#根据属性过滤重复的元素" class="headerlink" title="根据属性过滤重复的元素"></a>根据属性过滤重复的元素</h1><p><a href="http://stackoverflow.com/questions/27870136/java-lambda-stream-distinct-on-arbitrary-key" target="_blank" rel="noopener">参考地址</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据属性过滤重复的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T,Object&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">    Map&lt;Object,Boolean&gt; seen = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String[] data = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">        <span class="string">"1,2,a,4,5,6"</span>,</span><br><span class="line">        <span class="string">"2,2,b,4,5,6"</span>,</span><br><span class="line">        <span class="string">"3,2,a,4,5,6"</span>,</span><br><span class="line">        <span class="string">"4,2,d,4,5,6"</span>,</span><br><span class="line">        <span class="string">"5,2,b,5,5,6"</span>,</span><br><span class="line">        <span class="string">"6,2,f,4,5,6"</span>,</span><br><span class="line">        <span class="string">"7,2,c,4,5,6"</span>,</span><br><span class="line">        <span class="string">"8,2,g,4,5,6"</span>,</span><br><span class="line">        <span class="string">"9,2,d,4,5,6"</span>,</span><br><span class="line">        <span class="string">"10,2,g,5,5,6"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据单个属性过滤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrays = Stream.of(data).map(d -&gt; d.split(<span class="string">","</span>))</span><br><span class="line">            .filter(array -&gt; !array[<span class="number">0</span>].equals(<span class="string">"1"</span>))</span><br><span class="line">            .filter(distinctByKey(array -&gt; array[<span class="number">2</span>]))</span><br><span class="line">            .mapToInt(array -&gt; Integer.valueOf(array[<span class="number">0</span>]))</span><br><span class="line">            .toArray();</span><br><span class="line">    Assert.assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, arrays);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据多个属性过滤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrays = Stream.of(data).map(d -&gt; d.split(<span class="string">","</span>))</span><br><span class="line">            .filter(distinctByKey(array -&gt; array[<span class="number">2</span>] + array[<span class="number">3</span>]))</span><br><span class="line">            .mapToInt(array -&gt; Integer.valueOf(array[<span class="number">0</span>]))</span><br><span class="line">            .toArray();</span><br><span class="line">    Assert.assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>&#125;, arrays);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;根据属性过滤重复的元素&quot;&gt;&lt;a href=&quot;#根据属性过滤重复的元素&quot; class=&quot;headerlink&quot; title=&quot;根据属性过滤重复的元素&quot;&gt;&lt;/a&gt;根据属性过滤重复的元素&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/
      
    
    </summary>
    
      <category term="Java" scheme="https://www.wf2311.com/categories/Java/"/>
    
    
      <category term="java8" scheme="https://www.wf2311.com/tags/java8/"/>
    
      <category term="stream" scheme="https://www.wf2311.com/tags/stream/"/>
    
  </entry>
  
</feed>
