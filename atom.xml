<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王峰的个人博客</title>
  <icon>https://www.gravatar.com/avatar/1b45a1f0d115cd43a2aa6457214b0d56</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangfeng.pro/"/>
  <updated>2018-01-12T13:05:31.202Z</updated>
  <id>https://wangfeng.pro/</id>
  
  <author>
    <name>王峰</name>
    <email>wf2311@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有了Closeable为什么还要定义AutoCloseable</title>
    <link href="https://wangfeng.pro/a/%E6%9C%89%E4%BA%86Closeable%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E5%AE%9A%E4%B9%89AutoCloseable/"/>
    <id>https://wangfeng.pro/a/有了Closeable为什么还要定义AutoCloseable/</id>
    <published>2017-09-27T01:24:31.000Z</published>
    <updated>2018-01-12T13:05:31.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从try-with-resources语法块说起"><a href="#从try-with-resources语法块说起" class="headerlink" title="从try-with-resources语法块说起"></a>从<code>try-with-resources</code>语法块说起</h1><p>我们知道java7中引入了新的语法块<code>try-with-resources</code>:实现了<code>java.lang.AutoCloseable</code>的对象都可以作为<strong>资源</strong>，在<code>try</code>后面的括号类声明实例化，在后面的<code>{...}</code>语句块执行完后被自动关闭(<code>close()</code>方法被自动调用)。例如：在java7前，我们需要这样定义语句:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String path,<span class="keyword">byte</span>[] data)</span></span>&#123;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        os = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">        os.write(data);</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在java7后，可以变成这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String path,<span class="keyword">byte</span>[] data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> ( OutputStream os  = <span class="keyword">new</span> FileOutputStream(path))&#123;</span><br><span class="line">        os.write(data);</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Closeable与AutoCloseable的关系与区别"><a href="#Closeable与AutoCloseable的关系与区别" class="headerlink" title="Closeable与AutoCloseable的关系与区别"></a><code>Closeable</code>与<code>AutoCloseable</code>的关系与区别</h1><p><code>AutoCloseable</code>的源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Closeable</code>的源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Closeable</span> <span class="keyword">extends</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由上可知<code>Closeable</code>在jdk1.5中就定义了，而<code>AutoCloseable</code>在jdk1.7才被引入，并且<code>Closeable</code>继承了<code>AutoCloseable</code>。为什么要这样设计呢？答案很简单，仔细查看源码就可以知道原因:<br>因为<code>Closeable</code>的<code>close()</code>方法只会抛出<code>IOException</code>异常，而<code>AutoCloseable</code>的<code>close()</code>方法抛出的是<code>Exception</code>异常。如此一来<code>try-with-resources</code>的适用性就更大了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://stackoverflow.com/questions/19572537/why-is-autocloseable-the-base-interface-for-closeable-and-not-vice-versa" target="_blank" rel="noopener">https://stackoverflow.com/questions/19572537/why-is-autocloseable-the-base-interface-for-closeable-and-not-vice-versa</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从try-with-resources语法块说起&quot;&gt;&lt;a href=&quot;#从try-with-resources语法块说起&quot; class=&quot;headerlink&quot; title=&quot;从try-with-resources语法块说起&quot;&gt;&lt;/a&gt;从&lt;code&gt;try-wit
      
    
    </summary>
    
      <category term="Java" scheme="https://wangfeng.pro/categories/Java/"/>
    
    
      <category term="java基础" scheme="https://wangfeng.pro/tags/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="io" scheme="https://wangfeng.pro/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 远程调试spring boot项目</title>
    <link href="https://wangfeng.pro/a/IDEA%20%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95spring%20boot%E9%A1%B9%E7%9B%AE/"/>
    <id>https://wangfeng.pro/a/IDEA 远程调试spring boot项目/</id>
    <published>2017-09-21T01:33:52.000Z</published>
    <updated>2018-01-12T12:08:31.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA-远程调试spring-boot项目"><a href="#IDEA-远程调试spring-boot项目" class="headerlink" title="IDEA 远程调试spring boot项目"></a>IDEA 远程调试spring boot项目</h1><h2 id="1-Dokcer容器中"><a href="#1-Dokcer容器中" class="headerlink" title="1. Dokcer容器中"></a>1. Dokcer容器中</h2><h3 id="在Dockefile中配置-方法1"><a href="#在Dockefile中配置-方法1" class="headerlink" title="在Dockefile中配置(方法1)"></a>在Dockefile中配置(方法1)</h3><p>在Dockerfile文件中加入参数<code>-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n</code>,<br>例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ENV JAVA_OPTS="-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n"</span><br><span class="line">ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar" ]</span><br></pre></td></tr></table></figure></p><p>启动docker命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8000:8000 -p 4000:4000 -t imageName</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li><code>-p 8000:8000</code> 表示把在Dockerfile中定义的远程调试端口8000映射到服务器端口8000中；</li><li><code>-p 4000:4000</code> 表示把在应用程序的启动端口4000映射到服务器端口4000中；<h3 id="启动命令中配置-方法2"><a href="#启动命令中配置-方法2" class="headerlink" title="启动命令中配置(方法2)"></a>启动命令中配置(方法2)</h3>在启动命令中加上参数<code>-e &quot;JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y&quot;</code>，例如：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y" -p 8000:8000 -p 4000:4000 -t imageName</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-以嵌入式web容器运行时"><a href="#2-以嵌入式web容器运行时" class="headerlink" title="2. 以嵌入式web容器运行时"></a>2. 以嵌入式web容器运行时</h2><p>在启动命令中加上参数<code>-e &quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000</code>，例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000 -jar application.jar</span><br></pre></td></tr></table></figure></p><h2 id="3-以mvn-spring-boot-run运行时"><a href="#3-以mvn-spring-boot-run运行时" class="headerlink" title="3. 以mvn spring-boot:run运行时"></a>3. 以<code>mvn spring-boot:run</code>运行时</h2><p>在pom.xml中加入如下插件:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">            -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000</span><br><span class="line">        <span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://stackoverflow.com/questions/31070671/debug-spring-boot-in-docker" target="_blank" rel="noopener">debug spring-boot in docker</a></li><li><a href="https://stacktrace.tech/2017-03-21/spring-boot-idea-remote-debug/" target="_blank" rel="noopener">spring boot + IDEA 远程调试</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/examples/run-debug.html" target="_blank" rel="noopener">Spring Boot Maven Plugin - Debug the application</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IDEA-远程调试spring-boot项目&quot;&gt;&lt;a href=&quot;#IDEA-远程调试spring-boot项目&quot; class=&quot;headerlink&quot; title=&quot;IDEA 远程调试spring boot项目&quot;&gt;&lt;/a&gt;IDEA 远程调试spring boot
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://wangfeng.pro/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://wangfeng.pro/tags/SpringBoot/"/>
    
      <category term="远程调试" scheme="https://wangfeng.pro/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>spring boot + IDEA 远程调试</title>
    <link href="https://wangfeng.pro/a/spring%20boot%20+%20IDEA%20%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>https://wangfeng.pro/a/spring boot + IDEA 远程调试/</id>
    <published>2017-09-19T02:20:54.000Z</published>
    <updated>2018-01-12T12:08:31.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>若想调试远端web容器内部的应用，需要接入web容器的jvm，以Tomcat为例，需修改web容器的配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// bin\startup.bat（.sh）文件，在里面添加</span><br><span class="line"> </span><br><span class="line">// windows</span><br><span class="line">set CATALINA_OPTS="-agentlib:jdwp=transport=dt_socket,address=8888（自定义调试端口）,server=y,suspend=n %CATALINA_OPTS%"</span><br><span class="line"> </span><br><span class="line">// linux</span><br><span class="line">export CATALINA_OPTS="-agentlib:jdwp=transport=dt_socket,address= 8888（自定义调试端口）,server=y,suspend=n $CATALINA_OPTS"</span><br></pre></td></tr></table></figure></p><p>若是使用了spring boot并将工程打成了可执行JAR包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在使用java指令启动程序时需要附加额外的参数以开启外部调试，如下</span><br><span class="line">-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888（自定义调试端口）</span><br><span class="line"> </span><br><span class="line">// 完整的启动指令是类似下面酱的</span><br><span class="line">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888（自定义调试端口） -jar application.jar</span><br></pre></td></tr></table></figure></p><h1 id="IDEA连接远端调试"><a href="#IDEA连接远端调试" class="headerlink" title="IDEA连接远端调试"></a>IDEA连接远端调试</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WechatIMG2478.jpeg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WX20170321-035338@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WX20170321-035510@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>填写远端JMV所在服务器IP和调试端口号，保存即可：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WX20170321-035733@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>连接远端JVM启动调试：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/14/WX20170321-040105@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>如若连接成功，调试控制台将输出以下内容，如果没成功，请自行检查服务器防火墙以及网络<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/19/15/WX20170321-040237@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>接下来的操作就和在本地调试一样了，打断点，远端JVM会通过网络同步调试信息，和在本地没什么两样，要注意调试的时候和本地一样都是会暂停JVM继续往下执行的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;p&gt;若想调试远端web容器内部的应用，需要接入web容器的jvm，以Tomcat为例，需修改web容器的配置&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://wangfeng.pro/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://wangfeng.pro/tags/SpringBoot/"/>
    
      <category term="远程调试" scheme="https://wangfeng.pro/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题</title>
    <link href="https://wangfeng.pro/a/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://wangfeng.pro/a/Java面试题/</id>
    <published>2017-09-18T02:18:21.000Z</published>
    <updated>2018-01-12T12:08:31.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><ol><li>JAVA中的几种基本数据类型是什么，各自占用多少字节。</li><li>String类能被继承吗，为什么。</li><li>String，Stringbuffer，StringBuilder的区别。</li><li>ArrayList和LinkedList有什么区别。</li><li>讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当new的时候，他们的执行顺序。</li><li>用过哪些Map类，都有什么区别，HashMap是线程安全的吗,并发下使用的Map是什么，他们内部原理分别是什么，比如存储方式，hashcode，扩容，默认容量等。</li><li>JAVA8的ConcurrentHashMap为什么放弃了分段锁，有什么问题吗，如果你来设计，你如何设计。</li><li>有没顺序的 有没顺序的 有没顺序的 有没顺序的 MapMap 实现类 实现类 ，如果有 如果有 ，他们是怎么保证有序的 他们是怎么保证有序的 他们是怎么保证有序的 他们是怎么保证有序的 他们是怎么保证有序的 。</li><li>抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么,类可以实现多个接口么。</li><li>继承和聚合的区别在哪。</li><li>IO模型有哪些，讲讲你理解的nio，他和bio的区别是啥，谈谈reactor模型。</li><li>反射的原理，反射创建类实例的三种方式是什么。</li><li>反射中，Class.forName和ClassLoader区别。</li><li>描述动态代理的几种实现方式，分别说出相应的优缺点。</li><li>动态代理与cglib实现的区别。</li><li>为什么CGlib方式可以对接口实现代理。</li><li>final的用途。 </li><li>写出三种单例模式实现。</li><li>如何在父类中为子类自动完成所有的hashcode和equals实现？这么做有何优劣。</li><li>请结合OO设计理念，谈谈访问修饰符public、private、protected、default在应用设计中的作用。</li><li>深拷贝和浅拷贝区别。 </li><li>数组和链表数据结构描述，各自的时间复杂度。</li><li>error和exception的区别，CheckedException，RuntimeException的区别。</li><li>请列出5个运行时异常。</li><li>在自己的代码中，如果创建一个java.lang.String类，这个类是否可以被类加载器加载？为什么。</li><li>说一说你对java.lang.Object对象中hashCode和equals方法的理解。在什么场景下需要重新实现这两个方法。</li><li>在jdk1.5中，引入了泛型，泛型的存在是用来解决什么问题。</li><li>这样的a.hashcode() 有什么用，与a.equals(b)有什么关系。</li><li>有没可能 有没可能 有没可能 2个不相等的 对象有同个不相等的 对象有同个不相等的 对象有同个不相等的 对象有同个不相等的 对象有同个不相等的 对象有同hashcode hashcodehashcode hashcodehashcode 。</li><li>Java中的HashSet内部是如何工作的。</li><li>什么是序列化，怎么序列化，为什么序列化，反序列化会遇到什么问题，如何解决。</li><li>java8的新特性。</li></ol><h1 id="JVM知识"><a href="#JVM知识" class="headerlink" title="JVM知识"></a>JVM知识</h1><ol><li>什么情况下会发生栈内存溢出。</li><li>JVM的内存结构，Eden和Survivor比例。</li><li>JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。</li><li>JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代，说说你知道的几种主要的JVM参数。</li><li>你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。</li><li>垃圾回收算法的实现原理。 </li><li>当出现了内存溢出，你怎么排错。</li><li>JVM内存模型的相关知识了解多少，比如重排序，内存屏障，happen-before，主内存，工作内存等。</li><li>简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。 </li><li>讲讲JAVA的反射机制。</li><li>你们线上应用的JVM参数有哪些。 </li><li>g1和cms区别,吞吐量优先和响应优先的垃圾收集器选择。</li><li>怎么打出线程栈信息。</li><li>请解释如下jvm参数的含义： -server -Xms512m -Xmx512m -Xss1024K -XX:PermSize=256m -XX:MaxPermSize=512m -XX:MaxTenuringThreshold=20XX:MaxTenuringThreshold=20 XX:MaxTenuringThreshold=20XX:MaxTenuringThreshold=20 XX:MaxTenuringThreshold=20 XX:MaxTenuringThreshold=20 XX:MaxTenuringThreshold=20 XX:MaxTenuringThreshold=20 XX:CMSInitiatingOccupancyFraction=80 -XX:+UseCMSInitiatingOccupancyOnly。</li></ol><h1 id="开源框架知识"><a href="#开源框架知识" class="headerlink" title="开源框架知识"></a>开源框架知识</h1><ol><li>简单讲讲tomcat结构，以及其类加载器流程。</li><li>tomcat如何调优，涉及哪些参数。</li><li>讲讲Spring加载流程。</li><li>讲讲Spring事务的传播属性。</li><li>Spring如何管理事务的。</li><li>Spring怎么配置事务（具体说出一些关键的xml 元素）。</li><li>说说你对Spring的理解，非单例注入的原理？它的生命周期？循环注入的原理，aop的实现原理，说说aop中的几个术语，它们是怎么相互工作的。</li><li>Springmvc 中DispatcherServlet初始化过程。</li><li>netty的线程模型 netty的线程模型netty如何基于reactor模型上实现的。</li><li>netty的fashwheeltimer的用法，实现原理，是否出现过调用不够准时，怎么解决。</li><li>netty的心跳处理在弱网下怎么办。</li><li>netty的通讯协议是什么样的。</li></ol><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><ol><li>Linux系统下你关注过哪些内核参数，说说你知道的。</li><li>Linux下IO模型有几种，各自的含义是什么。</li><li>epoll和poll有什么区别。</li><li>平时用到哪些Linux命令。</li><li>用一行命令查看文件的最后五行。</li><li>用一行命令输出正在运行的java进程。</li><li>介绍下你理解的操作系统中线程切换过程。</li><li>进程和线程的区别。</li><li>top 命令之后有哪些内容，有什么作用。</li></ol><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ol><li>多线程的几种实现方式，什么是线程安全。</li><li>volatile的原理，作用，能代替锁么。</li><li>画一个线程的生命周期状态图。</li><li>sleep和wait的区别。</li><li>Lock与Synchronized的区别。</li><li>synchronized的原理是什么，一般用在什么地方(比如加在静态方法和非静态方法的区别，静态方法和非静态方法同时执行的时候会有影响吗)解释以下名词：重排序，自旋锁，偏向锁，轻量级锁，可重入锁，公平锁，非公平锁，乐观锁，悲观锁。</li><li>用过哪些原子类，他们的原理是什么。</li><li>JUC下研究过哪些并发工具，讲讲原理。</li><li>用过线程池吗，如果用过，请说明原理，并说说newCache和newFixed有什么区别，构造函数的各个参数的含义是什么，比如coreSize，maxsize等。</li><li>线程池的关闭方式有几种，各自的区别是什么。</li><li>假如有一个第三方接口，有很多个线程去调用获取数据，现在规定每秒钟最多有10个线程同时调用它，如何做到。</li><li>spring的controller是单例还是多例，怎么保证并发的安全。</li><li>用三个线程按顺序循环打印abc三个字母，比如abcabcabc。</li><li>ThreadLocal用过么，用途是什么，原理是什么，用的时候要注意什么。</li><li>如果让你实现一个并发安全的链表，你会怎么做。</li><li>有哪些无锁数据结构，他们实现的原理是什么。</li><li>讲讲java同步机制的wait和notify。</li><li>多线程如果线程挂住了怎么办。</li><li>countdowlatch和cyclicbarrier的内部原理和用法，以及相互之间的差别(比如countdownlatch的await方法和是怎么实现的)。 </li><li>对AbstractQueuedSynchronizer了解多少，讲讲加锁和解锁的流程，独占锁和公平所加锁有什么不同。 </li><li>使用synchronized修饰静态方法和非静态方法有什么区别。 </li><li>简述ConcurrentLinkedQueue和LinkedBlockingQueue的用处和不同之处。 </li><li>导致线程死锁的原因？怎么解除线程死锁。 </li><li>非常多个线程（可能是不同机器），相互之间需要等待协调，才能完成某种工作，问怎么设计这种协调方案。 </li><li>用过读写锁吗，原理是什么，一般在什么场景下用。 </li><li>开启多个线程，如果保证顺序执行，有哪几种实现方式，或者如何保证多个线程都执行完再拿到结果。 </li><li>延迟队列的实现方式，delayQueue和时间轮算法的异同。</li></ol><h1 id="TCP与HTTP"><a href="#TCP与HTTP" class="headerlink" title="TCP与HTTP"></a>TCP与HTTP</h1><ol><li>http1.0和http1.1有什么区别。</li><li>TCP三次握手和四次挥手的流程，为什么断开连接要4次,如果握手只有两次，会出现什么。</li><li>TIME_WAIT和CLOSE_WAIT的区别。</li><li>说说你知道的几种HTTP响应码，比如200, 302, 404。</li><li>当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤。</li><li>TCP/IP如何保证可靠性，说说TCP头的结构。 7. 如何避免浏览器缓存。</li><li>简述Http请求get和post的区别以及数据包格式。</li><li>简述HTTP请求的报文格式。</li><li>HTTPS的加密方式是什么，讲讲整个加密解密流程。</li></ol><h1 id="架构设计与分布式"><a href="#架构设计与分布式" class="headerlink" title="架构设计与分布式"></a>架构设计与分布式</h1><ol><li>常见的缓存策略有哪些，如何做到缓存与DB里的数据一致性，你们项目中用到了什么缓存系统，如何设计的。</li><li>用java自己实现一个LRU。</li><li>分布式集群下如何做到唯一序列号。</li><li>设计一个秒杀系统，30分钟没付款就自动关闭交易。</li><li>如何使用redis和zookeeper实现分布式锁？有什么区别优缺点，会有什么问题，分别适用什么场景。（延伸：如果知道redlock，讲讲他的算法实现，争议在哪里）</li><li>如果有人恶意创建非法连接，怎么解决。</li><li>分布式事务的原理，优缺点，如何使用分布式事务，2pc 3pc 的区别，解决了哪些问题，还有哪些问题没解决，如何解决，你自己项目里涉及到分布式事务是怎么处理的。</li><li>什么是一致性hash。</li><li>什么是restful，讲讲你理解的restful。 </li><li>如何设计建立和保持100w的长连接。</li><li>如何防止缓存击穿和雪崩。</li><li>解释什么是MESI协议(缓存一致性)。</li><li>说说你知道的几种HASH算法，简单的也可以。</li><li>什么是paxos算法，什么是zab协议。</li><li>一个在线文档系统，文档可以被编辑，如何防止多人同时对同一份文档进行编辑更新。</li><li>线上系统突然变得异常缓慢，你如何查找问题。</li><li>说说你平时用到的设计模式。</li><li>Dubbo的原理，有看过源码么，数据怎么流转的，怎么实现集群，负载均衡，服务注册和发现，重试转发，快速失败的策略是怎样的。</li><li>一次RPC请求的流程是什么。</li><li>自己实现过rpc么，原理可以简单讲讲。Rpc要解决什么问题。</li><li>异步模式的用途和意义。</li><li>缓存数据过期后的更新如何设计。</li><li>编程中自己都怎么考虑一些设计原则的，比如开闭原则，以及在工作中的应用。</li><li>设计一个社交网站中的“私信”功能，要求高并发、可扩展等等。 画一下架构图。</li><li>MVC模式，即常见的MVC框架。</li><li>聊下曾经参与设计的服务器架构并画图，谈谈遇到的问题，怎么解决的。</li><li>应用服务器怎么监控性能，各种方式的区别。</li><li>如何设计一套高并发支付方案，架构如何设计。</li><li>如何实现负载均衡，有哪些算法可以实现。</li><li>Zookeeper的用途，选举的原理是什么。</li><li>Zookeeper watch机制原理。</li><li>Mybatis的底层实现原理。</li><li>请思考一个方案，设计一个可以控制缓存总体大小的自动适应的本地缓存。</li><li>请思考一个方案，实现分布式环境下的countDownLatch。</li><li>后台系统怎么防止请求重复提交。</li><li>如何看待缓存的使用（本地缓存，集中式缓存），简述本地缓存和集中式缓存和优缺点。本地缓存在并发使用时的注意事项。</li><li>描述一个服务从发布到被消费的详细过程。</li><li>讲讲你理解的服务治理。</li><li>如何做到接口的幂等性。</li><li>如何做限流策略，令牌桶和漏斗算法的使用场景。</li><li>什么叫数据一致性，你怎么理解数据一致性。</li><li>分布式服务调用方，不依赖服务提供方的话，怎么处理服务方挂掉后，大量无效资源请求的浪费，如果只是服务提供方吞吐不高的时候该怎么做，如果服务挂了，那么一会重启，该怎么做到最小的资源浪费，流量半开的实现机制是什么。</li><li>dubbo的泛化调用怎么实现的，如果是你，你会怎么做。</li></ol><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ol><li>10亿个数字里里面找最小的10个。</li><li>有1亿个数字，其中有2个是重复的，快速找到它，时间和空间要最优。</li><li>2亿个随机生成的无序整数,找出中间大小的值。</li><li>给一个不知道长度的（可能很大）输入字符串，设计一种方案，将重复的字符排重。</li><li>遍历二叉树。</li><li>有3n+1个数字，其中3n个中是重复的，只有1个是不重复的，怎么找出来。</li><li>写一个字符串反转函数。</li><li>常用的排序算法，快排，归并、冒泡。 快排的最优时间复杂度，最差复杂度。冒泡排序的优化方案。</li><li>二分查找的时间复杂度，优势。</li><li>一个已经构建好的TreeSet，怎么完成倒排序。</li><li>什么是B+树，B-树，列出实际的使用场景。</li><li>一个单向链表，删除倒数第N个数据。</li><li>200个有序的数组，每个数组里面100个元素，找出top20的元素。</li><li>单向链表，查找中间的那个元素。</li></ol><h1 id="数据库知识"><a href="#数据库知识" class="headerlink" title="数据库知识"></a>数据库知识</h1><ol><li>数据库隔离级别有哪些，各自的含义是什么，MYSQL默认的隔离级别是是什么。</li><li>MYSQL有哪些存储引擎，各自优缺点。 3. 高并发下，如何做到安全的修改同一行数据。</li><li>乐观锁和悲观锁是什么，INNODB的标准行级锁有哪2种，解释其含义。 5. SQL优化的一般步骤是什么，怎么看执行计划，如何理解其中各个字段的含义。 6. 数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁。 7. MYsql的索引原理，索引的类型有哪些，如何创建合理的索引，索引如何优化。 8. 聚集索引和非聚集索引的区别。 9. select for update 是什么含义，会锁表还是锁行或是其他。 10. Btree怎么分裂的，什么时候分裂，为什么是平衡的。 11. 数据库的ACID是什么。 12. 某个表有近千万数据，CRUD比较慢，如何优化。 13. Mysql怎么优化table scan的。 14. 如何写sql能够有效的使用到复合索引。 15. mysql中in 和exists 区别。 16. 数据库自增主键可能的问题。 17. MVCC的含义。</li></ol><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><ol><li>用过哪些MQ，和其他mq比较有什么优缺点，MQ的连接是线程安全的吗，你们公司的MQ服务架构怎样的。</li><li>MQ系统的数据如何保证不丢失。</li><li>rabbitmq如何实现集群高可用。</li><li>kafka吞吐量高的原因。</li><li>kafka 和其他消息队列的区别，kafka 主从同步怎么实现。</li><li>利用mq怎么实现最终一致性。</li></ol><h1 id="Redis，Memcached"><a href="#Redis，Memcached" class="headerlink" title="Redis，Memcached"></a>Redis，Memcached</h1><ol><li>redis的list结构相关的操作。</li><li>Redis的数据结构都有哪些。</li><li>Redis的使用要注意什么，讲讲持久化方式，内存设置，集群的应用和优劣势，淘汰策略等。</li><li>redis2和redis3的区别，redis3内部通讯机制。</li><li>当前redis集群有哪些玩法，各自优缺点，场景。</li><li>Memcache的原理，哪些数据适合放在缓存中。</li><li>redis和memcached 的内存管理的区别。</li><li>Redis的并发竞争问题如何解决，了解Redis事务的CAS操作吗。</li><li>Redis的选举算法和流程是怎样的。</li><li>redis的持久化的机制，aof和rdb的区别。</li><li>redis的集群怎么同步的数据的。</li><li>知道哪些redis的优化操作。</li></ol><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><ol><li>elasticsearch了解多少，说说你们公司es的集群架构，索引数据大小，分片有多少，以及一些调优手段。elasticsearch的倒排索引是什么。</li><li>elasticsearch索引数据多了怎么办，如何调优，部署。</li><li>lucence内部结构是什么。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA基础&quot;&gt;&lt;a href=&quot;#JAVA基础&quot; class=&quot;headerlink&quot; title=&quot;JAVA基础&quot;&gt;&lt;/a&gt;JAVA基础&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;JAVA中的几种基本数据类型是什么，各自占用多少字节。&lt;/li&gt;
&lt;li&gt;String类能被继承
      
    
    </summary>
    
      <category term="面试题" scheme="https://wangfeng.pro/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://wangfeng.pro/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JetBrains插件推荐</title>
    <link href="https://wangfeng.pro/a/JetBrains%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>https://wangfeng.pro/a/JetBrains插件推荐/</id>
    <published>2017-09-13T01:09:17.000Z</published>
    <updated>2018-01-12T12:08:31.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻译插件"><a href="#翻译插件" class="headerlink" title="翻译插件"></a>翻译插件</h1><h2 id="TranslationPlugin"><a href="#TranslationPlugin" class="headerlink" title="TranslationPlugin"></a>TranslationPlugin</h2><p>JetBrains IDE/Android Studio 翻译插件，支持中英互译、单词朗读。<br>[<a href="https://github.com/YiiGuxing/TranslationPlugin" title="项目主页" target="_blank" rel="noopener">项目主页</a>] <a href="https://github.com/YiiGuxing/TranslationPlugin" target="_blank" rel="noopener">https://github.com/YiiGuxing/TranslationPlugin</a><br>[<a href="https://plugins.jetbrains.com/idea/plugin/8579" title="插件下载地址" target="_blank" rel="noopener">插件下载地址</a>] <a href="https://plugins.jetbrains.com/idea/plugin/8579" target="_blank" rel="noopener">https://plugins.jetbrains.com/idea/plugin/8579</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/09/20/18/screenshots.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;翻译插件&quot;&gt;&lt;a href=&quot;#翻译插件&quot; class=&quot;headerlink&quot; title=&quot;翻译插件&quot;&gt;&lt;/a&gt;翻译插件&lt;/h1&gt;&lt;h2 id=&quot;TranslationPlugin&quot;&gt;&lt;a href=&quot;#TranslationPlugin&quot; class=&quot;he
      
    
    </summary>
    
      <category term="其它" scheme="https://wangfeng.pro/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="插件" scheme="https://wangfeng.pro/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="app" scheme="https://wangfeng.pro/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>Java的枚举类使用技巧</title>
    <link href="https://wangfeng.pro/a/Java%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://wangfeng.pro/a/Java的枚举类使用技巧/</id>
    <published>2017-08-02T06:05:07.000Z</published>
    <updated>2018-01-12T12:08:31.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举接口"><a href="#枚举接口" class="headerlink" title="枚举接口"></a>枚举接口</h1><p>在web开发中我们常常会定义一些enum来表示常量，比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BlogType &#123;</span><br><span class="line">    BLOG(<span class="number">1</span>, <span class="string">"原创博文"</span>),</span><br><span class="line">    REPRINT(<span class="number">2</span>, <span class="string">"转载文章"</span>),</span><br><span class="line">    QUESTION(<span class="number">3</span>, <span class="string">"问答"</span>),</span><br><span class="line">    VOTE(<span class="number">4</span>, <span class="string">"投票"</span>),</span><br><span class="line">    SUBJECT(<span class="number">5</span>, <span class="string">"专栏"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    BlogType(Integer code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BlogStatus &#123;</span><br><span class="line">    PRIVATE(<span class="number">1</span>, <span class="string">"自己可见"</span>),</span><br><span class="line">    FRIEND(<span class="number">2</span>, <span class="string">"好友可见"</span>),</span><br><span class="line">    ONLINE(<span class="number">3</span>, <span class="string">"登陆用户可见"</span>),</span><br><span class="line">    PUBLISH(<span class="number">4</span>, <span class="string">"公开"</span>);</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    BlogStatus(Integer code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出它们的结构一样，都有<code>code</code>和<code>name</code>这两个属性，以及对应的<code>getter</code>方法，因此可以定义一个如下的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Common</span>&lt;<span class="title">C</span>, <span class="title">N</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">C <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">N <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所有如上面的常量枚举类都可以实现该接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BlogType implements Common &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> BlogStatus implements Common &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="公用静态方法"><a href="#公用静态方法" class="headerlink" title="公用静态方法"></a>公用静态方法</h1><p>我们可以在在<code>Common</code>接口中定义一个如下的静态方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;E extends Enum&lt;E&gt; &amp; Common, C&gt; <span class="function">E <span class="title">getByCode</span><span class="params">(Class&lt;E&gt; clazz, C code)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(clazz.getEnumConstants())</span><br><span class="line">            .filter(t -&gt; t.getCode().equals(code))</span><br><span class="line">            .findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用此方法可以根据code来查找指定的<code>Common</code>实现类中的值，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(BlogType.QUESTION, Common.getByCode(BlogType.class, BlogType.QUESTION.getCode()));</span><br><span class="line">Assert.assertEquals(BlogStatus.PUBLISH, Common.getByCode(BlogType.class, BlogStatus.PUBLISH.getCode()));</span><br></pre></td></tr></table></figure></p><h1 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h1><p>当我们定义如下的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consts"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResult <span class="title">consts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApiResult result = <span class="keyword">new</span> ApiResult();</span><br><span class="line">    Map&lt;String, Object&gt; consts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    consts.put(<span class="string">"blogType"</span>, BlogType.values());</span><br><span class="line">    consts.put(<span class="string">"blogStatus"</span>, BlogStatus.values());</span><br><span class="line">    result.setData(consts);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过请求，得到的结果格式是<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"blogStatus"</span>: [</span><br><span class="line">      <span class="string">"PRIVATE"</span>,</span><br><span class="line">      <span class="string">"FRIEND"</span>,</span><br><span class="line">      <span class="string">"ONLINE"</span>,</span><br><span class="line">      <span class="string">"PUBLISH"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"blogType"</span>: [</span><br><span class="line">      <span class="string">"BLOG"</span>,</span><br><span class="line">      <span class="string">"REPRINT"</span>,</span><br><span class="line">      <span class="string">"QUESTION"</span>,</span><br><span class="line">      <span class="string">"VOTE"</span>,</span><br><span class="line">      <span class="string">"SUBJECT"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而我们期待的到是格式是包含<code>code</code>和<code>name</code>的键值对的形式，而不是以上的形式。通过在<code>Common</code>接口中添加以上方法可以实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonValue</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Map&lt;C, N&gt; <span class="title">toMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;C, N&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">    map.put(getCode(), getName());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时再次通过页面请求，得到的结果将如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"blogStatus"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"1"</span>: <span class="string">"自己可见"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"2"</span>: <span class="string">"好友可见"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"3"</span>: <span class="string">"登陆用户可见"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"4"</span>: <span class="string">"公开"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"blogType"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"1"</span>: <span class="string">"原创博文"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"2"</span>: <span class="string">"转载文章"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"3"</span>: <span class="string">"问答"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"4"</span>: <span class="string">"投票"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"5"</span>: <span class="string">"专栏"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此外，如果想通过使用<code>fastjson</code>的<code>JSON.toJSONString()</code>也能得到如上格式的结果，可以让<code>Common</code>继承<code>com.alibaba.fastjson.JSONAware</code>,并在<code>Common</code>中实现<code>JSONAware</code>的<code>toJSONString</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">toJSONString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(toMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下代码将会通过:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(<span class="string">"&#123;2:\"转载文章\"&#125;"</span>, JSON.toJSONString(BlogType.REPRINT));</span><br></pre></td></tr></table></figure></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONAware;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wf2311</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enums</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Common</span>&lt;<span class="title">C</span>, <span class="title">N</span>&gt; <span class="keyword">extends</span> <span class="title">JSONAware</span> </span>&#123;</span><br><span class="line">        <span class="function">C <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">N <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt; &amp; Common, C&gt; <span class="function">E <span class="title">getByCode</span><span class="params">(Class&lt;E&gt; clazz, C code)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(clazz.getEnumConstants())</span><br><span class="line">                    .filter(t -&gt; t.getCode().equals(code))</span><br><span class="line">                    .findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@JsonValue</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> Map&lt;C, N&gt; <span class="title">toMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Map&lt;C, N&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">            map.put(getCode(), getName());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> String <span class="title">toJSONString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSONString(toMap());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> BlogType implements Common &#123;</span><br><span class="line">        BLOG(<span class="number">1</span>, <span class="string">"原创博文"</span>),</span><br><span class="line">        REPRINT(<span class="number">2</span>, <span class="string">"转载文章"</span>),</span><br><span class="line">        QUESTION(<span class="number">3</span>, <span class="string">"问答"</span>),</span><br><span class="line">        VOTE(<span class="number">4</span>, <span class="string">"投票"</span>),</span><br><span class="line">        SUBJECT(<span class="number">5</span>, <span class="string">"专栏"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer code;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        BlogType(Integer code, String name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> BlogStatus implements Common &#123;</span><br><span class="line">        PRIVATE(<span class="number">1</span>, <span class="string">"自己可见"</span>),</span><br><span class="line">        FRIEND(<span class="number">2</span>, <span class="string">"好友可见"</span>),</span><br><span class="line">        ONLINE(<span class="number">3</span>, <span class="string">"登陆用户可见"</span>),</span><br><span class="line">        PUBLISH(<span class="number">4</span>, <span class="string">"公开"</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        BlogStatus(Integer code, String name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;枚举接口&quot;&gt;&lt;a href=&quot;#枚举接口&quot; class=&quot;headerlink&quot; title=&quot;枚举接口&quot;&gt;&lt;/a&gt;枚举接口&lt;/h1&gt;&lt;p&gt;在web开发中我们常常会定义一些enum来表示常量，比如:&lt;br&gt;&lt;figure class=&quot;highlight java
      
    
    </summary>
    
      <category term="Java" scheme="https://wangfeng.pro/categories/Java/"/>
    
    
      <category term="enum" scheme="https://wangfeng.pro/tags/enum/"/>
    
      <category term="json" scheme="https://wangfeng.pro/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Maven常用命令</title>
    <link href="https://wangfeng.pro/a/Maven%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://wangfeng.pro/a/Maven常用命令/</id>
    <published>2017-07-28T08:49:07.000Z</published>
    <updated>2018-01-12T12:08:31.391Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>更新父模块到指定版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn versions:set -DnewVersion=1.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure></li><li><p>更新子模块版本到与模块相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -N versions:update-child-modules</span><br></pre></td></tr></table></figure></li><li><p>发布版本到指定本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy -DskipTests -DaltDeploymentRepository=wf2311-mvn-repo::default::file:D:/Projects/open-source/maven-repo/repository/</span><br></pre></td></tr></table></figure></li><li><p>跳过测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-DskipTests</span><br></pre></td></tr></table></figure></li><li><p>跳过gpg签名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-DskipGPG</span><br></pre></td></tr></table></figure></li><li><p>查看执行过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-X</span><br></pre></td></tr></table></figure></li><li><p>把jar包加入本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=D:\thrift-0.9.2.jar -DgroupId=org.apache.thrift -DartifactId=libthrift -Dversion=0.9.2 -Dpackaging=jar</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;更新父模块到指定版本号&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td
      
    
    </summary>
    
      <category term="其它" scheme="https://wangfeng.pro/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="maven" scheme="https://wangfeng.pro/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中使用thymeleaf模板在找不到对于模板的解决方法</title>
    <link href="https://wangfeng.pro/a/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8thymeleaf%E6%A8%A1%E6%9D%BF%E5%9C%A8%E6%89%BE%E4%B8%8D%E5%88%B0%E5%AF%B9%E4%BA%8E%E6%A8%A1%E6%9D%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://wangfeng.pro/a/SpringBoot中使用thymeleaf模板在找不到对于模板的解决方法/</id>
    <published>2017-07-28T03:04:21.000Z</published>
    <updated>2018-01-12T12:08:31.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>SpringBoot中使用thymeleaf模板，在IDEA中以main方法运行可以正常显示页面，但在打包之后就会提示找不到模板页面的错误信息:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[THYMELEAF][http-nio-4000-exec-1] Exception processing template "/blog/index": Error resolving template "/blog/index", template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">org.thymeleaf.exceptions.TemplateInputException: Error resolving template "/blog/index", template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:870) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:353) [thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:191) [thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:59) [spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_74]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_74]</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_74]</span><br><span class="line">Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template "/blog/index", template might not exist or might not be accessible by any of the</span><br><span class="line"> configured Template Resolvers] with root cause</span><br><span class="line">org.thymeleaf.exceptions.TemplateInputException: Error resolving template "/blog/index", template might not exist or might not be accessible by any of the configured Template Resolvers</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:870) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:353) ~[thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:191) ~[thymeleaf-spring4-3.0.7.RELEASE.jar!/:3.0.7.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:59) ~[spring-webmvc-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_74]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_74]</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.16.jar!/:8.5.16]</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_74]</span><br></pre></td></tr></table></figure></p><h1 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h1><p>参考<a href="https://stackoverflow.com/questions/26493831/spring-boot-thymeleaf-not-resolving-fragments-after-packaging#answer-26503954" title="stackflow" target="_blank" rel="noopener">stackflow</a> 类似的问题</p><blockquote><p>You don’t need the leading / on the view name, i.e. you should return fragments :: nodeList rather than /fragments :: nodeList. Having made this change Thymeleaf should be able to find the template when run from your IDE or from a jar file.<br>If you’re interested, here’s what’s happening under the hood:<br>The view name is used to search for a resource on the classpath. fragments :: nodeList means that the resource name is /templates/fragments.html and /fragments :: nodeList means that the resource name is /templates//fragments.html (note the double slash). When you’re running in your IDE the resource is available straight off the filesystem and the double slash doesn’t cause a problem. When you’re running from a jar file the resource is nested within that jar and the double slash prevents it from being found. I don’t fully understand why there’s this difference in behaviour and it is rather unfortunate. I’ve opened an issue so that we (the Spring Boot team) can see if there’s anything we can do to make the behaviour consistent.</p></blockquote><p>简单来说就是在springboot配置文件里的<code>spring.thymeleaf.prefix=classpath:/templates/</code>的与返回页面的视图设置<code>mav.setViewName(&quot;/blog/write&quot;);</code> 在组成url路径时会构成一个双斜杠<code>//</code>，在IDEA中运行时是可以被识别的，但在程序打包运行之后就不能被识别了，所以会出现这个问题。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>根据上面的错误原因分析，目前的解决办法就是让模板的路径中不会出现双斜杠<code>//</code>，或者支持双斜杠<code>//</code>路径(目前已经有人在jira中提出了该<a href="https://jira.spring.io/browse/SPR-15596" title="bug" target="_blank" rel="noopener">bug</a> 期待在之后的版本中能狗支持双斜杠<code>//</code>路径)</p><ol><li>去掉返回视图页面最前面的斜杠：<br> <code>mav.setViewName(&quot;/blog/write&quot;);</code><br> 改为<br> <code>mav.setViewName(&quot;blog/write&quot;);</code></li><li>或者在配置文件里去掉最后的斜杠：<br> <code>spring.thymeleaf.prefix=classpath:/templates/</code><br> 改为<br> <code>spring.thymeleaf.prefix=classpath:/templates</code><br> 同时需要修改thymeleaf模板文件中的相关内容，比如<br> <code>layout:decorate=&quot;~{blog/common/common}</code><br> 此时应变为<br> <code>layout:decorate=&quot;~{/blog/common/common}</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;SpringBoot中使用thymeleaf模板，在IDEA中以main方法运行可以正常显示页面，但在打包之后就会提示找不到
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://wangfeng.pro/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://wangfeng.pro/tags/SpringBoot/"/>
    
      <category term="thymeleaf" scheme="https://wangfeng.pro/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO源码分析之Buffer</title>
    <link href="https://wangfeng.pro/a/Java%20NIO%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BBuffer/"/>
    <id>https://wangfeng.pro/a/Java NIO源码分析之Buffer/</id>
    <published>2017-07-20T11:19:19.000Z</published>
    <updated>2018-01-12T12:08:31.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Buffer是特定基元类型数据的容器"><a href="#Buffer是特定基元类型数据的容器" class="headerlink" title="Buffer是特定基元类型数据的容器"></a><code>Buffer</code>是特定基元类型数据的容器</h1><p><code>Buffer</code>(缓冲区)是一种特定基元类型的线性、有限序列。除了内容之外，缓冲区的基本属性是<code>capacity</code>(容量)、<code>limit</code>(上限)和<code>position</code>(位置)以及<code>mark</code>(标记):</p><blockquote><p><code>capacity</code> 缓冲区能够容纳的数据元素的最大数量。这一容量在缓冲区创建时被设定，并且永远不能被改变。<br><code>limit</code> 缓冲区的第一个不能被读或写的元素。或者说，缓冲区中现存元素的计数。<br><code>position</code> 下一个要被读或写的元素的索引。位置会自动由相应的<code>get()</code>和<code>put()</code>函数更新。<br><code>mark</code> 一个备忘位置。调用<code>mark()</code>来设定mark = postion。调用<code>reset()</code>设定position = mark。标记在设定前是未定义的(undefined)。<br>这四个属性之间总是遵循以下关系：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> &lt;= mark &lt;= position &lt;= limit &lt;= capacity</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Buffer是特定基元类型数据的容器&quot;&gt;&lt;a href=&quot;#Buffer是特定基元类型数据的容器&quot; class=&quot;headerlink&quot; title=&quot;Buffer是特定基元类型数据的容器&quot;&gt;&lt;/a&gt;&lt;code&gt;Buffer&lt;/code&gt;是特定基元类型数据的容器&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://wangfeng.pro/categories/Java/"/>
    
    
      <category term="nio" scheme="https://wangfeng.pro/tags/nio/"/>
    
  </entry>
  
  <entry>
    <title>Git常用操作命令</title>
    <link href="https://wangfeng.pro/a/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>https://wangfeng.pro/a/Git常用操作命令/</id>
    <published>2017-07-19T09:24:22.000Z</published>
    <updated>2018-01-12T12:08:31.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="克隆远程制定分支到本地"><a href="#克隆远程制定分支到本地" class="headerlink" title="克隆远程制定分支到本地"></a>克隆远程制定分支到本地</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;branch&gt; &lt;remote_repo&gt; ## branch为分支名，remote_repo为远程仓库</span><br></pre></td></tr></table></figure><h1 id="标签相关"><a href="#标签相关" class="headerlink" title="标签相关"></a>标签相关</h1><h2 id="切换到指定分支"><a href="#切换到指定分支" class="headerlink" title="切换到指定分支"></a>切换到指定分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure><h2 id="检出指定分支"><a href="#检出指定分支" class="headerlink" title="检出指定分支"></a>检出指定分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout tags/&lt;tag_name&gt; -b &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h2 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tagName&gt;</span><br></pre></td></tr></table></figure><h2 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;克隆远程制定分支到本地&quot;&gt;&lt;a href=&quot;#克隆远程制定分支到本地&quot; class=&quot;headerlink&quot; title=&quot;克隆远程制定分支到本地&quot;&gt;&lt;/a&gt;克隆远程制定分支到本地&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="其它" scheme="https://wangfeng.pro/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="git" scheme="https://wangfeng.pro/tags/git/"/>
    
      <category term="常用命令" scheme="https://wangfeng.pro/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>HttpServletRequest常用获取URL的方法</title>
    <link href="https://wangfeng.pro/a/HttpServletRequest%E5%B8%B8%E7%94%A8%E8%8E%B7%E5%8F%96URL%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://wangfeng.pro/a/HttpServletRequest常用获取URL的方法/</id>
    <published>2017-07-17T02:56:50.000Z</published>
    <updated>2018-01-12T12:08:31.389Z</updated>
    
    <content type="html"><![CDATA[<p>1、request.getRequestURL()<br>返回的是完整的url，包括Http协议，端口号，servlet名字和映射路径，但它不包含请求参数。<br>2、request.getRequestURI()<br>得到的是request URL的部分值，并且web容器没有decode过的<br>3、request.getContextPath()<br>返回 the context of the request.<br>4、request.getServletPath()<br>返回调用servlet的部分url.<br>5、request.getQueryString()<br>返回url路径后面的查询字符串  </p><p>示例：</p><pre><code>当前url：http://localhost:8080/CarsiLogCenter_new/idpstat.jsp?action=idp.sptopnrequest.getRequestURL() http://localhost:8080/CarsiLogCenter_new/idpstat.jsprequest.getRequestURI() /CarsiLogCenter_new/idpstat.jsprequest.getContextPath()/CarsiLogCenter_newrequest.getServletPath() /idpstat.jsprequest.getQueryString()action=idp.sptopn</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、request.getRequestURL()&lt;br&gt;返回的是完整的url，包括Http协议，端口号，servlet名字和映射路径，但它不包含请求参数。&lt;br&gt;2、request.getRequestURI()&lt;br&gt;得到的是request URL的部分值，并且web容
      
    
    </summary>
    
      <category term="Java Web" scheme="https://wangfeng.pro/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="https://wangfeng.pro/tags/Servlet/"/>
    
      <category term="HttpServletRequest" scheme="https://wangfeng.pro/tags/HttpServletRequest/"/>
    
      <category term="SpringMvc" scheme="https://wangfeng.pro/tags/SpringMvc/"/>
    
  </entry>
  
  <entry>
    <title>使用thymeleaf变量给onclick属性赋值</title>
    <link href="https://wangfeng.pro/a/%E4%BD%BF%E7%94%A8thymeleaf%E5%8F%98%E9%87%8F%E7%BB%99onclick%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/"/>
    <id>https://wangfeng.pro/a/使用thymeleaf变量给onclick属性赋值/</id>
    <published>2017-07-15T01:47:13.000Z</published>
    <updated>2018-01-12T12:08:31.389Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在使用thymeleaf渲染页面时，遇到如下情况：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"submit('publish');"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><code>submit</code>函数的参数会根据后端参数的不同而动态改变，Google搜索到了一些类似问题，记录一下解决方法。</p><p>已经测试可用的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">th:onclick="'alert(\'' + $&#123;myVar&#125; + '\');'"</span><br></pre></td></tr></table></figure></p><p>还未测试：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">th:onclick</span>=<span class="string">"'javascript:upload(' + $&#123;gallery&#125; + ')'"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">th:onclick="|upload('$&#123;command['class'].simpleName&#125;', '$&#123;gallery&#125;')|"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:style</span>=<span class="string">"'background:url(' + @&#123;/&lt;path-to-image&gt;&#125; + ');'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在使用thymeleaf渲染页面时，遇到如下情况：&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/t
      
    
    </summary>
    
      <category term="Java Web" scheme="https://wangfeng.pro/categories/Java-Web/"/>
    
    
      <category term="thymeleaf" scheme="https://wangfeng.pro/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 优化之 index merge(索引合并)</title>
    <link href="https://wangfeng.pro/a/MySQL%20%E4%BC%98%E5%8C%96%E4%B9%8B%20index%20merge(%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6)/"/>
    <id>https://wangfeng.pro/a/MySQL 优化之 index merge(索引合并)/</id>
    <published>2017-07-14T08:09:10.000Z</published>
    <updated>2018-01-12T12:08:31.388Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>深入理解 index merge 是使用索引进行优化的重要基础之一。理解了 index merge 技术，我们才知道应该如何在表上建立索引。</p></blockquote><h1 id="1-为什么会有index-merge"><a href="#1-为什么会有index-merge" class="headerlink" title="1. 为什么会有index merge"></a>1. 为什么会有index merge</h1><p>我们的 where 中可能有多个条件(或者join)涉及到多个字段，它们之间进行 AND 或者 OR，那么此时就有可能会使用到 index merge 技术。index merge 技术如果简单的说，其实就是：对多个索引分别进行条件扫描，然后将它们各自的结果进行合并(intersect/union)。</p><p>MySQL5.0之前，一个表一次只能使用一个索引，无法同时使用多个索引分别进行条件扫描。但是从5.1开始，引入了 index merge 优化技术，对同一个表可以使用多个索引分别进行条件扫描。</p><p>相关文档：<a href="http://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.6/en/index-merge-optimization.html</a> (注意该文档中说的有几处错误)</p><p>The Index Merge method is used to retrieve rows with several range scans and to merge their results into one. The merge can produce unions, intersections, or unions-of-intersections of its underlying scans. This access method merges index scans from a single table; it does not merge scans across multiple tables.</p><p>In EXPLAIN output, the Index Merge method appears as index_merge in the type column. In this case, the key column contains a list of indexes used, and key_len contains a list of the longest key parts for those indexes.</p><p>index merge: 同一个表的多个索引的范围扫描可以对结果进行合并，合并方式分为三种：union, intersection, 以及它们的组合(先内部intersect然后在外面union)。</p><p>官方文档给出了四个例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> key1 = <span class="number">10</span> <span class="keyword">OR</span> key2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> (key1 = <span class="number">10</span> <span class="keyword">OR</span> key2 = <span class="number">20</span>) <span class="keyword">AND</span> non_key=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, t2 <span class="keyword">WHERE</span> (t1.key1 <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">OR</span> t1.key2 <span class="keyword">LIKE</span> <span class="string">'value%'</span>) <span class="keyword">AND</span> t2.key1=t1.some_col;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1, t2 <span class="keyword">WHERE</span> t1.key1=<span class="number">1</span> <span class="keyword">AND</span> (t2.key1=t1.some_col <span class="keyword">OR</span> t2.key2=t1.some_col2);</span><br></pre></td></tr></table></figure></p><p>但是第四个例子，感觉并不会使用 index merge. 因为 t2.key1=t1.some_col 和 t2.key2=t1.some_col2 之间进行的是 OR 运算，而且 t2.key2 是复合索引的第二个字段(非第一个字段)。所以：t2.key2 = t1.some_col2 并不能使用到复合索引。(文档这里应该是错误的)</p><p>index merge 算法根据合并算法的不同分成了三种：intersect, union, sort_union. </p><h1 id="2-index-merge-之-intersect"><a href="#2-index-merge-之-intersect" class="headerlink" title="2. index merge 之 intersect"></a>2. index merge 之 intersect</h1><p>简单而言，index intersect merge就是多个索引条件扫描得到的结果进行交集运算。显然在多个索引提交之间是 AND 运算时，才会出现 index intersect merge. 下面两种where条件或者它们的组合时会进行 index intersect merge:</p><p>1) 条件使用到复合索引中的所有字段或者左前缀字段(对单字段索引也适用)</p><p>key_part1=const1 AND key_part2=const2 … AND key_partN=constN<br>2) 主键上的任何范围条件</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> innodb_table <span class="keyword">WHERE</span> primary_key &lt; <span class="number">10</span> <span class="keyword">AND</span> key_col1=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> (key1_part1=<span class="number">1</span> <span class="keyword">AND</span> key1_part2=<span class="number">2</span>) <span class="keyword">AND</span> key2=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>上面只说到复合索引，但是其实单字段索引显然也是一样的。比如 select * from tab where key1=xx and key2 =xxx; 也是有可能进行index intersect merge的。另外上面两种情况的 AND 组合也一样可能会进行 index intersect merge.</p><p>The Index Merge intersection algorithm performs simultaneous scans on all used indexes and produces the intersection of row sequences that it receives from the merged index scans. (intersect merge运行方式：多个索引同时扫描，然后结果取交集)</p><p>If all columns used in the query are covered by the used indexes, full table rows are not retrieved (EXPLAIN output contains Using index in Extra field in this case). Here is an example of such a query:(索引覆盖扫描，无需回表)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> key1=<span class="number">1</span> <span class="keyword">AND</span> key2=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>If the used indexes do not cover all columns used in the query, full rows are retrieved only when the range conditions for all used keys are satisfied.(索引不能覆盖，则对满足条件的再进行回表)</p><p>If one of the merged conditions is a condition over a primary key of an InnoDB table, it is not used for row retrieval, but is used to filter out rows retrieved using other conditions.</p><h1 id="3-index-merge-之-union"><a href="#3-index-merge-之-union" class="headerlink" title="3. index merge 之 union"></a>3. index merge 之 union</h1><p>简单而言，index uion merge就是多个索引条件扫描，对得到的结果进行并集运算，显然是多个条件之间进行的是 OR 运算。</p><p>下面几种类型的 where 条件，以及他们的组合可能会使用到 index union merge算法：</p><p>1) 条件使用到复合索引中的所有字段或者左前缀字段(对单字段索引也适用)</p><p>2) 主键上的任何范围条件</p><p>3) 任何符合 index intersect merge 的where条件；</p><p>上面三种 where 条件进行 OR 运算时，可能会使用 index union merge算法。</p><p>例子：</p><p>SELECT <em> FROM t1 WHERE key1=1 OR key2=2 OR key3=3;<br>SELECT </em> FROM innodb_table WHERE (key1=1 AND key2=2) OR (key3=’foo’ AND key4=’bar’) AND key5=5;<br>第一个例子，就是三个 单字段索引 进行 OR 运算，所以他们可能会使用 index union merge算法。</p><p>第二个例子，复杂一点。(key1=1 AND key2=2) 是符合 index intersect merge; (key3=’foo’ AND key4=’bar’) AND key5=5 也是符合index intersect merge，所以 二者之间进行 OR 运算，自然可能会使用 index union merge算法。</p><h1 id="4-index-merge-之-sort-union"><a href="#4-index-merge-之-sort-union" class="headerlink" title="4. index merge 之 sort_union"></a>4. index merge 之 sort_union</h1><p>This access algorithm is employed when the WHERE clause was converted to several range conditions combined by OR, but for which the Index Merge method union algorithm is not applicable.(多个条件扫描进行 OR 运算，但是不符合 index union merge算法的，此时可能会使用 sort_union算法)</p><p>官方文档给出了两个例子：</p><p>SELECT <em> FROM tbl_name WHERE key_col1 &lt; 10 OR key_col2 &lt; 20;<br>SELECT </em> FROM tbl_name WHERE (key_col1 &gt; 10 OR key_col2 = 20) AND nonkey_col=30;<br>但是显然：因为 key_col2 不是复合索引的第一个字段，对它进行 OR 运算，是不可能使用到索引的。所以这两个例子应该也是错误的，它们实际上并不会进行 index sort_union merge算法。</p><p>The difference between the sort-union algorithm and the union algorithm is that the sort-union algorithm must first fetch row IDs for all rows and sort them before returning any rows.(sort-union合并算法和union合并算法的不同点，在于返回结果之前是否排序，为什么需要排序呢？可能是因为两个结果集，进行并集运算，需要去重，所以才进行排序？？？)</p><h1 id="5-index-merge的局限"><a href="#5-index-merge的局限" class="headerlink" title="5. index merge的局限"></a>5. index merge的局限</h1><p>1）If your query has a complex WHERE clause with deep AND/OR nesting and MySQL does not choose the optimal plan, try distributing terms using the following identity laws:</p><p>(x AND y) OR z = (x OR z) AND (y OR z)<br>(x OR y) AND z = (x AND z) OR (y AND z)<br>如果我们的条件比较复杂，用到多个 and / or 条件运算，而MySQL没有使用最优的执行计划，那么可以使用上面的两个等式将条件进行转换一下。</p><p>2）Index Merge is not applicable to full-text indexes. We plan to extend it to cover these in a future MySQL release.(全文索引没有index merge)</p><p>3）Before MySQL 5.6.6, if a range scan is possible on some key, the optimizer will not consider using Index Merge Union or Index Merge Sort-Union algorithms. For example, consider this query:</p><p>SELECT * FROM t1 WHERE (goodkey1 &lt; 10 OR goodkey2 &lt; 20) AND badkey &lt; 30;<br>For this query, two plans are possible:</p><p>An Index Merge scan using the (goodkey1 &lt; 10 OR goodkey2 &lt; 20) condition.</p><p>A range scan using the badkey &lt; 30 condition.</p><p>However, the optimizer considers only the second plan.</p><p>这一点对以低版本的MySQL是一个很大的缺陷。就是如果where条件中有 &gt;, &lt;, &gt;=, &lt;=等条件，那么优化器不会使用 index merge，而且还会忽略其他的索引，不会使用它们，哪怕他们的选择性更优。</p><h1 id="6-对-index-merge-的进一步优化"><a href="#6-对-index-merge-的进一步优化" class="headerlink" title="6. 对 index merge 的进一步优化"></a>6. 对 index merge 的进一步优化</h1><p>index merge使得我们可以使用到多个索引同时进行扫描，然后将结果进行合并。听起来好像是很好的功能，但是如果出现了 index intersect merge，那么一般同时也意味着我们的索引建立得不太合理，因为 index intersect merge 是可以通过建立 复合索引进行更一步优化的。</p><p>比如下面的select:</p><p>SELECT * FROM t1 WHERE key1=1 AND key2=2 AND key3=3;<br>显然我们是可以在这三个字段上建立一个复合索引来进行优化的，这样就只需要扫描一个索引一次，而不是对三个所以分别扫描一次。</p><p>percona官网有一篇 比较复合索引和index merge 的好文章：Multi Column indexes vs Index Merge</p><h1 id="7-复合索引的最左前缀原则"><a href="#7-复合索引的最左前缀原则" class="headerlink" title="7. 复合索引的最左前缀原则"></a>7. 复合索引的最左前缀原则</h1><p>上面我们说到，对复合索引的非最左前缀字段进行 OR 运算，是无法使用到复合索引的。比如：</p><p>SELECT * FROM tbl_name WHERE (key_col1 &gt; 10 OR key_col2 = 20) AND nonkey_col=30;<br>其原因是，MySQL中的索引，使用的是B+tree, 也就是说他是：先按照复合索引的 第一个字段的大小来排序，插入到 B+tree 中的，当第一个字段值相同时，在按照第二个字段的值比较来插入的。那么如果我们需要对： OR key_col2 = 20 这样的条件也使用复合索引，那么该怎么操作呢？应该要对复合索引进行全扫描，找出所有 key_col2 =20 的项，然后还要回表去判断 nonkey_col=30，显然代价太大了。所以一般而言 OR key_col2 = 20 这样的条件是无法使用到复合索引的。如果一定要使用索引，那么可以在 col2 上单独建立一个索引。</p><p>复合索引的最左前缀原则：</p><p>MySQL中的复合索引，查询时只会使用到最左前缀，比如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    mysql&gt; show index from role_goods;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">    | Table      | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |</span><br><span class="line">    +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">    | role_goods |          0 | PRIMARY  |            1 | id          | A         |       22816 |     NULL | NULL   |      | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId   |            1 | roleId      | A         |        1521 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | goodsId  |            1 | goodsId     | A         |        1521 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId_2 |            1 | roleId      | A         |        1901 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId_2 |            2 | status      | A         |        4563 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    | role_goods |          1 | roleId_2 |            3 | number      | A         |       22816 |     NULL | NULL   | YES  | BTREE      |         |               |</span><br><span class="line">    +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>上面有一个复合索引：roleId_2(roleId,status,number)，如果条件是： where roleId=xxx and number=xxx，那么此时只会使用到最左前缀roleId，而不会使用到 number 来进行过滤。因为它们中间存在一个字段 status 没有出现在where条件中。实验如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> explain select * from role_goods where roleId=100000001 and status=1 and number=1 limit 1;</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------------+------+-------+</span><br><span class="line">| id | select_type | table      | type | possible_keys   | key      | key_len | ref               | rows | Extra |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId,roleId_2 | roleId_2 | 23      | const,const,const |   13 | NULL  |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------------+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> explain select * from role_goods where roleId=100000001 and status=1 limit 1;</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------+------+-------+</span><br><span class="line">| id | select_type | table      | type | possible_keys   | key      | key_len | ref         | rows | Extra |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId,roleId_2 | roleId_2 | 14      | const,const |   13 | NULL  |</span><br><span class="line">+----+-------------+------------+------+-----------------+----------+---------+-------------+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> explain select * from role_goods where roleId=100000001 and number=1 limit 1;</span><br><span class="line">+----+-------------+------------+------+-----------------+--------+---------+-------+------+-------------+</span><br><span class="line">| id | select_type | table      | type | possible_keys   | key    | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+------------+------+-----------------+--------+---------+-------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId,roleId_2 | roleId | 9       | const |   14 | Using where |</span><br><span class="line">+----+-------------+------------+------+-----------------+--------+---------+-------+------+-------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"><span class="meta">mysql&gt;</span> explain select * from role_goods ignore index(roleId) where roleId=100000001 and number=1 limit 1;</span><br><span class="line">+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">| id | select_type | table      | type | possible_keys | key      | key_len | ref   | rows | Extra                 |</span><br><span class="line">+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | role_goods | ref  | roleId_2      | roleId_2 | 9       | const |   14 | Using index condition |</span><br><span class="line">+----+-------------+------------+------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>可以看到 <code>key_len</code> 的变化：</p><p>显然最后一个查询仅仅使用到符合索引中的 roleId, 没有使用到 number. number使用在了 index conditon(也就是索引的push down技术)</p><p>注意最左前缀，并不是是指：一定要按照各个字段出现在where中的顺序来建立复合索引的。比如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where status=2 and roleId=xxx and number = xxx</span><br></pre></td></tr></table></figure></p><p>该条件建立符合索引，我们并不需要按照status,roleId，number它们出现的顺序来建立索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> role_goods <span class="keyword">add</span> <span class="keyword">index</span> <span class="keyword">sin</span>(<span class="keyword">status</span>,roleId,<span class="built_in">number</span>)</span><br></pre></td></tr></table></figure></p><p>这是对最左前缀极大的误解。因为 <code>where status=2 and roleId=xxx and number = xxx 和 where roleId=xxx and number = xxx and status=2</code>它们是等价的。复合索引，哪个字段放在最前面，需要根据哪个字段经常出现在where条件中，哪个字段的选择性最好来判断的。</p><p>进一步可以参考的文章：</p><p><a href="http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/" title="http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/" target="_blank" rel="noopener">http://www.orczhou.com/index.php/2013/01/mysql-source-code-query-optimization-index-merge/</a></p><p><a href="http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html" title="http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html" target="_blank" rel="noopener">http://www.cnblogs.com/nocode/archive/2013/01/28/2880654.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;深入理解 index merge 是使用索引进行优化的重要基础之一。理解了 index merge 技术，我们才知道应该如何在表上建立索引。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-为什么会有index-merge&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="数据库" scheme="https://wangfeng.pro/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://wangfeng.pro/tags/MySQL/"/>
    
      <category term="索引" scheme="https://wangfeng.pro/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>微信web协议分析和实现微信机器人</title>
    <link href="https://wangfeng.pro/a/%E5%BE%AE%E4%BF%A1web%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%E5%92%8C%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>https://wangfeng.pro/a/微信web协议分析和实现微信机器人/</id>
    <published>2017-07-14T08:01:19.000Z</published>
    <updated>2018-01-12T12:08:31.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信web协议分析和实现微信机器人（微信网页版-wx2-qq-com）"><a href="#微信web协议分析和实现微信机器人（微信网页版-wx2-qq-com）" class="headerlink" title="微信web协议分析和实现微信机器人（微信网页版 wx2.qq.com）"></a>微信web协议分析和实现微信机器人（微信网页版 wx2.qq.com）</h1><p><em>时间: 2017-05-22 14:16:34</em></p><p>1.打开首页，分配一个随机uuid，<br>2.根据该uuid获取二维码图片。<br>3.微信客户端扫描该图片，在客户端确认登录。<br>4.浏览器不停的调用一个接口，如果返回登录成功，则调用登录接口<br>5.此时可以获取联系人列表，可以发送消息。然后不断调用同步接口。<br>6.如果同步接口有返回，则可以获取新消息，然后继续调用同步接口。</p><ul><li>Java版实现源码：<a href="https://github.com/biezhi/wechat-robot" target="_blank" rel="noopener">https://github.com/biezhi/wechat-robot</a></li><li>Python实现：<a href="https://github.com/Urinx/WeixinBot" target="_blank" rel="noopener">https://github.com/Urinx/WeixinBot</a></li><li>C#实现：<a href="https://github.com/sherlockchou86/WeChat.NET" target="_blank" rel="noopener">https://github.com/sherlockchou86/WeChat.NET</a></li><li>QT实现：<a href="https://github.com/xiangzhai/qwx" target="_blank" rel="noopener">https://github.com/xiangzhai/qwx</a></li><li>Perl实现：<a href="https://github.com/sjdy521/Mojo-Weixin" target="_blank" rel="noopener">https://github.com/sjdy521/Mojo-Weixin</a></li></ul><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">       +--------------+     +---------------+   +---------------+</span><br><span class="line">       |              |     |               |   |               |</span><br><span class="line">       |   Get UUID   |     |  Get Contact  |   | Status Notify |</span><br><span class="line">       |              |     |               |   |               |</span><br><span class="line">       +-------+------+     +-------^-------+   +-------^-------+</span><br><span class="line">               |                    |                   |</span><br><span class="line">               |                    +-------+  +--------+</span><br><span class="line">               |                            |  |</span><br><span class="line">       +-------v------+               +-----+--+------+      +--------------+</span><br><span class="line">       |              |               |               |      |              |</span><br><span class="line">       |  Get QRCode  |               |  Weixin Init  +------&gt;  Sync Check  &lt;----+</span><br><span class="line">       |              |               |               |      |              |    |</span><br><span class="line">       +-------+------+               +-------^-------+      +-------+------+    |</span><br><span class="line">               |                              |                      |           |</span><br><span class="line">               |                              |                      +-----------+</span><br><span class="line">               |                              |                      |</span><br><span class="line">       +-------v------+               +-------+--------+     +-------v-------+</span><br><span class="line">       |              | Confirm Login |                |     |               |</span><br><span class="line">+------&gt;    Login     +---------------&gt; New Login Page |     |  Weixin Sync  |</span><br><span class="line">|      |              |               |                |     |               |</span><br><span class="line">|      +------+-------+               +----------------+     +---------------+</span><br><span class="line">|             |</span><br><span class="line">|QRCode Scaned|</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><h2 id="WebWechat-API"><a href="#WebWechat-API" class="headerlink" title="WebWechat API"></a>WebWechat API</h2><h3 id="1-获取UUID（参考方法-getUUID）"><a href="#1-获取UUID（参考方法-getUUID）" class="headerlink" title="1. 获取UUID（参考方法 getUUID）"></a>1. 获取UUID（参考方法 getUUID）</h3><table><thead><tr><th>API</th><th>获取 UUID</th></tr></thead><tbody><tr><td>url</td><td><a href="https://login.weixin.qq.com/jslogin" target="_blank" rel="noopener">https://login.weixin.qq.com/jslogin</a></td></tr><tr><td>method</td><td>GET</td></tr><tr><td>data</td><td>URL Encode</td></tr><tr><td>params</td><td><strong>appid</strong> : wx782c26e4c19acffb <br> <strong>fun</strong> : new <br> <strong>lang</strong>: zh_CN <br> <strong>_</strong> :  时间戳</td></tr></tbody></table><p>返回数据(String):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.QRLogin.code = 200; window.QRLogin.uuid = &quot;xxx&quot;</span><br></pre></td></tr></table></figure><h3 id="2-显示二维码（参考方法-showQrCode）"><a href="#2-显示二维码（参考方法-showQrCode）" class="headerlink" title="2. 显示二维码（参考方法 showQrCode）"></a>2. 显示二维码（参考方法 showQrCode）</h3><table><thead><tr><th>API</th><th>显示二维码</th></tr></thead><tbody><tr><td>url</td><td><a href="https://login.weixin.qq.com/qrcode/{uuid}" target="_blank" rel="noopener">https://login.weixin.qq.com/qrcode/{uuid}</a></td></tr><tr><td>method</td><td>POST</td></tr><tr><td>params</td><td><strong>t</strong> : webwx <br> <strong>_</strong> : 时间戳</td></tr></tbody></table><p><br></p><h3 id="3-等待登录（参考方法-waitForLogin）这里是微信确认登录"><a href="#3-等待登录（参考方法-waitForLogin）这里是微信确认登录" class="headerlink" title="3. 等待登录（参考方法 waitForLogin）这里是微信确认登录"></a>3. 等待登录（参考方法 waitForLogin）这里是微信确认登录</h3><table><thead><tr><th>API</th><th>二维码扫描登录</th></tr></thead><tbody><tr><td>url</td><td><a href="https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login" target="_blank" rel="noopener">https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login</a></td></tr><tr><td>method</td><td>GET</td></tr><tr><td>params</td><td><strong>tip</strong> : 1:未扫描  0:已扫描 <br> <strong>uuid</strong> : 获取到的uuid <br> <strong>_</strong> : 时间戳</td></tr></tbody></table><p>返回数据(String):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.code=xxx;</span><br><span class="line"></span><br><span class="line">xxx:</span><br><span class="line">408 登陆超时</span><br><span class="line">201 扫描成功</span><br><span class="line">200 确认登录</span><br><span class="line"></span><br><span class="line">当返回200时，还会有</span><br><span class="line">window.redirect_uri=&quot;https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxnewloginpage?ticket=xxx&amp;uuid=xxx&amp;lang=xxx&amp;scan=xxx&quot;;</span><br></pre></td></tr></table></figure></p><h3 id="4-登录获取Cookie（参考方法-login）"><a href="#4-登录获取Cookie（参考方法-login）" class="headerlink" title="4. 登录获取Cookie（参考方法 login）"></a>4. 登录获取Cookie（参考方法 login）</h3><table><thead><tr><th>API</th><th>webwxnewloginpage</th></tr></thead><tbody><tr><td>url</td><td><a href="https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxnewloginpage" target="_blank" rel="noopener">https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxnewloginpage</a></td></tr><tr><td>method</td><td>GET</td></tr><tr><td>params</td><td><strong>ticket</strong> : xxx <br> <strong>uuid</strong> : xxx <br> <strong>lang</strong> : zh_CN <br> <strong>scan</strong> : xxx <br> <strong>fun</strong> : new</td></tr></tbody></table><p>返回数据(XML):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;error&gt;</span><br><span class="line">&lt;ret&gt;0&lt;/ret&gt;</span><br><span class="line">&lt;message&gt;OK&lt;/message&gt;</span><br><span class="line">&lt;skey&gt;xxx&lt;/skey&gt;</span><br><span class="line">&lt;wxsid&gt;xxx&lt;/wxsid&gt;</span><br><span class="line">&lt;wxuin&gt;xxx&lt;/wxuin&gt;</span><br><span class="line">&lt;pass_ticket&gt;xxx&lt;/pass_ticket&gt;</span><br><span class="line">&lt;isgrayscale&gt;1&lt;/isgrayscale&gt;</span><br><span class="line">&lt;/error&gt;</span><br></pre></td></tr></table></figure></p><p>在这一步获取xml中的 <code>skey</code>, <code>wxsid</code>, <code>wxuin</code>, <code>pass_ticket</code></p><h3 id="5-微信初始化（参考方法-wxInit）"><a href="#5-微信初始化（参考方法-wxInit）" class="headerlink" title="5. 微信初始化（参考方法 wxInit）"></a>5. 微信初始化（参考方法 wxInit）</h3><table><thead><tr><th>API</th><th>webwxinit</th></tr></thead><tbody><tr><td>url</td><td><a href="https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxinit" target="_blank" rel="noopener">https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxinit</a></td></tr><tr><td>method</td><td>POST</td></tr><tr><td>data</td><td>JSON</td></tr><tr><td>header</td><td>Content-Type: application/json; charset=UTF-8</td></tr><tr><td>params</td><td>{ <br> &nbsp;&nbsp;&nbsp;&nbsp; BaseRequest: { <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    Uin: xxx, <br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sid: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    Skey: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DeviceID: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp; } <br> }</td></tr></tbody></table><p>返回数据(JSON):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;BaseResponse&quot;: &#123;</span><br><span class="line">&quot;Ret&quot;: 0,</span><br><span class="line">&quot;ErrMsg&quot;: &quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;Count&quot;: 11,</span><br><span class="line">&quot;ContactList&quot;: [...],</span><br><span class="line">&quot;SyncKey&quot;: &#123;</span><br><span class="line">&quot;Count&quot;: 4,</span><br><span class="line">&quot;List&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;Key&quot;: 1,</span><br><span class="line">&quot;Val&quot;: 635705559</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;User&quot;: &#123;</span><br><span class="line">&quot;Uin&quot;: xxx,</span><br><span class="line">&quot;UserName&quot;: xxx,</span><br><span class="line">&quot;NickName&quot;: xxx,</span><br><span class="line">&quot;HeadImgUrl&quot;: xxx,</span><br><span class="line">&quot;RemarkName&quot;: &quot;&quot;,</span><br><span class="line">&quot;PYInitial&quot;: &quot;&quot;,</span><br><span class="line">&quot;PYQuanPin&quot;: &quot;&quot;,</span><br><span class="line">&quot;RemarkPYInitial&quot;: &quot;&quot;,</span><br><span class="line">&quot;RemarkPYQuanPin&quot;: &quot;&quot;,</span><br><span class="line">&quot;HideInputBarFlag&quot;: 0,</span><br><span class="line">&quot;StarFriend&quot;: 0,</span><br><span class="line">&quot;Sex&quot;: 1,</span><br><span class="line">&quot;Signature&quot;: &quot;Apt-get install B&quot;,</span><br><span class="line">&quot;AppAccountFlag&quot;: 0,</span><br><span class="line">&quot;VerifyFlag&quot;: 0,</span><br><span class="line">&quot;ContactFlag&quot;: 0,</span><br><span class="line">&quot;WebWxPluginSwitch&quot;: 0,</span><br><span class="line">&quot;HeadImgFlag&quot;: 1,</span><br><span class="line">&quot;SnsFlag&quot;: 17</span><br><span class="line">&#125;,</span><br><span class="line">&quot;ChatSet&quot;: xxx,</span><br><span class="line">&quot;SKey&quot;: xxx,</span><br><span class="line">&quot;ClientVersion&quot;: 369297683,</span><br><span class="line">&quot;SystemTime&quot;: 1453124908,</span><br><span class="line">&quot;GrayScale&quot;: 1,</span><br><span class="line">&quot;InviteStartCount&quot;: 40,</span><br><span class="line">&quot;MPSubscribeMsgCount&quot;: 2,</span><br><span class="line">&quot;MPSubscribeMsgList&quot;: [...],</span><br><span class="line">&quot;ClickReportInterval&quot;: 600000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一步中获取 <code>SyncKey</code>, <code>User</code> 后面的消息监听用。</p><h3 id="6-开启微信状态通知（参考方法-wxStatusNotify）"><a href="#6-开启微信状态通知（参考方法-wxStatusNotify）" class="headerlink" title="6. 开启微信状态通知（参考方法 wxStatusNotify）"></a>6. 开启微信状态通知（参考方法 wxStatusNotify）</h3><table><thead><tr><th>API</th><th>webwxstatusnotify</th></tr></thead><tbody><tr><td>url</td><td><a href="https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxstatusnotify" target="_blank" rel="noopener">https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxstatusnotify</a></td></tr><tr><td>method</td><td>POST</td></tr><tr><td>data</td><td>JSON</td></tr><tr><td>header</td><td>Content-Type: application/json; charset=UTF-8</td></tr><tr><td>params</td><td>{ <br> &nbsp;&nbsp;&nbsp;&nbsp; BaseRequest: { Uin: xxx, Sid: xxx, Skey: xxx, DeviceID: xxx }, <br> &nbsp;&nbsp;&nbsp;&nbsp; Code: 3, <br> &nbsp;&nbsp;&nbsp;&nbsp; FromUserName: 自己的ID, <br> &nbsp;&nbsp;&nbsp;&nbsp; ToUserName: 自己的ID, <br> &nbsp;&nbsp;&nbsp;&nbsp; ClientMsgId: 时间戳 <br> }</td></tr></tbody></table><p>返回数据(JSON):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;BaseResponse&quot;: &#123;</span><br><span class="line">&quot;Ret&quot;: 0,</span><br><span class="line">&quot;ErrMsg&quot;: &quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-获取联系人列表（参考方法-getContact）"><a href="#7-获取联系人列表（参考方法-getContact）" class="headerlink" title="7. 获取联系人列表（参考方法 getContact）"></a>7. 获取联系人列表（参考方法 getContact）</h3><table><thead><tr><th>API</th><th>webwxgetcontact</th></tr></thead><tbody><tr><td>url</td><td><a href="https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxgetcontact" target="_blank" rel="noopener">https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxgetcontact</a></td></tr><tr><td>method</td><td>POST</td></tr><tr><td>data</td><td>JSON</td></tr><tr><td>header</td><td>ContentType: application/json; charset=UTF-8</td></tr><tr><td>params</td><td>{ <br> &nbsp;&nbsp;&nbsp;&nbsp; BaseRequest: { <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    Uin: xxx, <br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sid: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    Skey: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DeviceID: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp; } <br> }</td></tr></tbody></table><p>返回数据(JSON):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;BaseResponse&quot;: &#123;</span><br><span class="line">&quot;Ret&quot;: 0,</span><br><span class="line">&quot;ErrMsg&quot;: &quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;MemberCount&quot;: 334,</span><br><span class="line">&quot;MemberList&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;Uin&quot;: 0,</span><br><span class="line">&quot;UserName&quot;: xxx,</span><br><span class="line">&quot;NickName&quot;: &quot;Urinx&quot;,</span><br><span class="line">&quot;HeadImgUrl&quot;: xxx,</span><br><span class="line">&quot;ContactFlag&quot;: 3,</span><br><span class="line">&quot;MemberCount&quot;: 0,</span><br><span class="line">&quot;MemberList&quot;: [],</span><br><span class="line">&quot;RemarkName&quot;: &quot;&quot;,</span><br><span class="line">&quot;HideInputBarFlag&quot;: 0,</span><br><span class="line">&quot;Sex&quot;: 0,</span><br><span class="line">&quot;Signature&quot;: &quot;我是二蛋&quot;,</span><br><span class="line">&quot;VerifyFlag&quot;: 8,</span><br><span class="line">&quot;OwnerUin&quot;: 0,</span><br><span class="line">&quot;PYInitial&quot;: &quot;URINX&quot;,</span><br><span class="line">&quot;PYQuanPin&quot;: &quot;Urinx&quot;,</span><br><span class="line">&quot;RemarkPYInitial&quot;: &quot;&quot;,</span><br><span class="line">&quot;RemarkPYQuanPin&quot;: &quot;&quot;,</span><br><span class="line">&quot;StarFriend&quot;: 0,</span><br><span class="line">&quot;AppAccountFlag&quot;: 0,</span><br><span class="line">&quot;Statues&quot;: 0,</span><br><span class="line">&quot;AttrStatus&quot;: 0,</span><br><span class="line">&quot;Province&quot;: &quot;&quot;,</span><br><span class="line">&quot;City&quot;: &quot;&quot;,</span><br><span class="line">&quot;Alias&quot;: &quot;Urinxs&quot;,</span><br><span class="line">&quot;SnsFlag&quot;: 0,</span><br><span class="line">&quot;UniFriend&quot;: 0,</span><br><span class="line">&quot;DisplayName&quot;: &quot;&quot;,</span><br><span class="line">&quot;ChatRoomId&quot;: 0,</span><br><span class="line">&quot;KeyWord&quot;: &quot;gh_&quot;,</span><br><span class="line">&quot;EncryChatRoomId&quot;: &quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">],</span><br><span class="line">&quot;Seq&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="8-消息检查（参考方法-syncCheck）"><a href="#8-消息检查（参考方法-syncCheck）" class="headerlink" title="8.消息检查（参考方法 syncCheck）"></a>8.消息检查（参考方法 syncCheck）</h3><table><thead><tr><th>API</th><th>synccheck</th></tr></thead><tbody><tr><td>url</td><td><a href="https://webpush2.weixin.qq.com/cgi-bin/mmwebwx-bin/synccheck" target="_blank" rel="noopener">https://webpush2.weixin.qq.com/cgi-bin/mmwebwx-bin/synccheck</a></td></tr><tr><td>method</td><td>GET</td></tr><tr><td>data</td><td>JSON</td></tr><tr><td>header</td><td>ContentType: application/json; charset=UTF-8</td></tr><tr><td>params</td><td>{ <br> &nbsp;&nbsp;&nbsp;&nbsp; BaseRequest: { <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    Uin: xxx, <br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sid: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    Skey: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DeviceID: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp; } <br> }</td></tr></tbody></table><p>返回数据(String):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.synccheck=&#123;retcode:&quot;xxx&quot;,selector:&quot;xxx&quot;&#125;</span><br><span class="line"></span><br><span class="line">retcode:</span><br><span class="line">0 正常</span><br><span class="line">1100 失败/登出微信</span><br><span class="line">selector:</span><br><span class="line">0 正常</span><br><span class="line">2 新的消息</span><br><span class="line">7 进入/离开聊天界面</span><br></pre></td></tr></table></figure></p><h3 id="9-获取最新消息（参考方法-webwxsync）"><a href="#9-获取最新消息（参考方法-webwxsync）" class="headerlink" title="9. 获取最新消息（参考方法 webwxsync）"></a>9. 获取最新消息（参考方法 webwxsync）</h3><table><thead><tr><th>API</th><th>webwxsync</th></tr></thead><tbody><tr><td>url</td><td><a href="https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxsync?sid=xxx&amp;skey=xxx&amp;pass_ticket=xxx" target="_blank" rel="noopener">https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxsync?sid=xxx&amp;skey=xxx&amp;pass_ticket=xxx</a></td></tr><tr><td>method</td><td>POST</td></tr><tr><td>data</td><td>JSON</td></tr><tr><td>header</td><td>ContentType: application/json; charset=UTF-8</td></tr><tr><td>params</td><td>{ <br> &nbsp;&nbsp;&nbsp;&nbsp; BaseRequest: { Uin: xxx, Sid: xxx, Skey: xxx, DeviceID: xxx }, <br> &nbsp;&nbsp;&nbsp;&nbsp; SyncKey: xxx, <br> &nbsp;&nbsp;&nbsp;&nbsp; rr: <code>时间戳取反</code> <br> }</td></tr></tbody></table><p>返回数据(JSON):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&apos;BaseResponse&apos;: &#123;&apos;ErrMsg&apos;: &apos;&apos;, &apos;Ret&apos;: 0&#125;,</span><br><span class="line">&apos;SyncKey&apos;: &#123;</span><br><span class="line">&apos;Count&apos;: 7,</span><br><span class="line">&apos;List&apos;: [</span><br><span class="line">&#123;&apos;Val&apos;: 636214192, &apos;Key&apos;: 1&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&apos;ContinueFlag&apos;: 0,</span><br><span class="line">&apos;AddMsgCount&apos;: 1,</span><br><span class="line">&apos;AddMsgList&apos;: [</span><br><span class="line">&#123;</span><br><span class="line">&apos;FromUserName&apos;: &apos;&apos;,</span><br><span class="line">&apos;PlayLength&apos;: 0,</span><br><span class="line">&apos;RecommendInfo&apos;: &#123;...&#125;,</span><br><span class="line">&apos;Content&apos;: &quot;&quot;, </span><br><span class="line">&apos;StatusNotifyUserName&apos;: &apos;&apos;,</span><br><span class="line">&apos;StatusNotifyCode&apos;: 5,</span><br><span class="line">&apos;Status&apos;: 3,</span><br><span class="line">&apos;VoiceLength&apos;: 0,</span><br><span class="line">&apos;ToUserName&apos;: &apos;&apos;,</span><br><span class="line">&apos;ForwardFlag&apos;: 0,</span><br><span class="line">&apos;AppMsgType&apos;: 0,</span><br><span class="line">&apos;AppInfo&apos;: &#123;&apos;Type&apos;: 0, &apos;AppID&apos;: &apos;&apos;&#125;,</span><br><span class="line">&apos;Url&apos;: &apos;&apos;,</span><br><span class="line">&apos;ImgStatus&apos;: 1,</span><br><span class="line">&apos;MsgType&apos;: 51,</span><br><span class="line">&apos;ImgHeight&apos;: 0,</span><br><span class="line">&apos;MediaId&apos;: &apos;&apos;, </span><br><span class="line">&apos;FileName&apos;: &apos;&apos;,</span><br><span class="line">&apos;FileSize&apos;: &apos;&apos;,</span><br><span class="line">...</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">],</span><br><span class="line">&apos;ModChatRoomMemberCount&apos;: 0,</span><br><span class="line">&apos;ModContactList&apos;: [],</span><br><span class="line">&apos;DelContactList&apos;: [],</span><br><span class="line">&apos;ModChatRoomMemberList&apos;: [],</span><br><span class="line">&apos;DelContactCount&apos;: 0,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="10-发送消息（参考方法-webwxsendmsg）"><a href="#10-发送消息（参考方法-webwxsendmsg）" class="headerlink" title="10. 发送消息（参考方法 webwxsendmsg）"></a>10. 发送消息（参考方法 webwxsendmsg）</h3><table><thead><tr><th>API</th><th>webwxsendmsg</th></tr></thead><tbody><tr><td>url</td><td><a href="https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxsendmsg?pass_ticket=xxx" target="_blank" rel="noopener">https://wx2.qq.com/cgi-bin/mmwebwx-bin/webwxsendmsg?pass_ticket=xxx</a></td></tr><tr><td>method</td><td>POST</td></tr><tr><td>data</td><td>JSON</td></tr><tr><td>header</td><td>ContentType: application/json; charset=UTF-8</td></tr><tr><td>params</td><td>{ <br> &nbsp;&nbsp;&nbsp;&nbsp; BaseRequest: { Uin: xxx, Sid: xxx, Skey: xxx, DeviceID: xxx }, <br> &nbsp;&nbsp;&nbsp;&nbsp; Msg: { <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Type: 1 文字消息, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Content: 要发送的消息, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FromUserName: 自己的ID, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ToUserName: 好友的ID, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LocalID: 与clientMsgId相同, <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ClientMsgId: 时间戳左移4位随后补上4位随机数 <br> &nbsp;&nbsp;&nbsp;&nbsp; } <br> }</td></tr></tbody></table><p>返回数据(JSON):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;BaseResponse&quot;: &#123;</span><br><span class="line">&quot;Ret&quot;: 0,</span><br><span class="line">&quot;ErrMsg&quot;: &quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多资料：<br><a href="https://github.com/xiangzhai/qwx" target="_blank" rel="noopener">https://github.com/xiangzhai/qwx</a><br><a href="https://github.com/Urinx/WeixinBot" target="_blank" rel="noopener">https://github.com/Urinx/WeixinBot</a><br><a href="http://www.07net01.com/2016/01/1201188.html" target="_blank" rel="noopener">http://www.07net01.com/2016/01/1201188.html</a><br><a href="http://www.cnblogs.com/xiaozhi_5638/p/4923811.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiaozhi_5638/p/4923811.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信web协议分析和实现微信机器人（微信网页版-wx2-qq-com）&quot;&gt;&lt;a href=&quot;#微信web协议分析和实现微信机器人（微信网页版-wx2-qq-com）&quot; class=&quot;headerlink&quot; title=&quot;微信web协议分析和实现微信机器人（微信网页
      
    
    </summary>
    
      <category term="其它" scheme="https://wangfeng.pro/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="wechat" scheme="https://wangfeng.pro/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>测试markdown语法</title>
    <link href="https://wangfeng.pro/a/%E6%B5%8B%E8%AF%95markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://wangfeng.pro/a/测试markdown语法/</id>
    <published>2017-07-14T08:01:18.000Z</published>
    <updated>2018-01-12T12:08:31.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用马克飞象"><a href="#欢迎使用马克飞象" class="headerlink" title="欢迎使用马克飞象"></a>欢迎使用马克飞象</h1><p>@(Pro)[马克飞象, 帮助, Markdown]</p><p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p><ul><li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li><li><strong>得心应手</strong> ：简洁高效的编辑器，提供<a href="http://maxiang.info/client_zh" target="_blank" rel="noopener">桌面客户端</a>以及<a href="https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop" target="_blank" rel="noopener">离线Chrome App</a>，支持移动端 Web；</li><li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li></ul><hr><p>[TOC]</p><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="noopener">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Ctrl + /</code>查看帮助。 </p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure><h3 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 USD</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 USD</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 USD</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;end</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>以及时序图:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>想了解更多，请查看<strong>流程图</strong><a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">语法</a>以及<strong>时序图</strong><a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">语法</a>。</p></blockquote><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p><ul><li style="list-style: none"><input type="checkbox" checked> 已完成事项</li><li style="list-style: none"><input type="checkbox"> 待办事项1</li><li style="list-style: none"><input type="checkbox"> 待办事项2</li></ul><blockquote><p><strong>注意：</strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p></blockquote><h2 id="印象笔记相关"><a href="#印象笔记相关" class="headerlink" title="印象笔记相关"></a>印象笔记相关</h2><h3 id="笔记本和标签"><a href="#笔记本和标签" class="headerlink" title="笔记本和标签"></a>笔记本和标签</h3><p><strong>马克飞象</strong>增加了<code>@(笔记本)[标签A|标签B]</code>语法, 以选择笔记本和添加标签。 <strong>绑定账号后</strong>， 输入<code>(</code>自动会出现笔记本列表，请从中选择。</p><h3 id="笔记标题"><a href="#笔记标题" class="headerlink" title="笔记标题"></a>笔记标题</h3><p><strong>马克飞象</strong>会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 <code>欢迎使用马克飞象</code>。</p><h3 id="快捷编辑"><a href="#快捷编辑" class="headerlink" title="快捷编辑"></a>快捷编辑</h3><p>保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到<strong>马克飞象</strong>中打开并编辑该笔记。</p><blockquote><p><strong>注意：</strong>目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。</p></blockquote><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p><strong>马克飞象</strong>通过<strong>将Markdown原文以隐藏内容保存在笔记中</strong>的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。</p><blockquote><p><strong>隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。</strong></p></blockquote><h3 id="离线存储"><a href="#离线存储" class="headerlink" title="离线存储"></a>离线存储</h3><p><strong>马克飞象</strong>使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过<code>文档管理</code>打开。</p><blockquote><p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，<strong>请务必经常及时同步到印象笔记</strong>。</p></blockquote><h2 id="编辑器相关"><a href="#编辑器相关" class="headerlink" title="编辑器相关"></a>编辑器相关</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>右侧系统菜单（快捷键<code>Ctrl + M</code>）的<code>设置</code>中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>帮助    <code>Ctrl + /</code><br>同步文档    <code>Ctrl + S</code><br>创建文档    <code>Ctrl + Alt + N</code><br>最大化编辑器    <code>Ctrl + Enter</code><br>预览文档 <code>Ctrl + Alt + Enter</code><br>文档管理    <code>Ctrl + O</code><br>系统菜单    <code>Ctrl + M</code> </p><p>加粗    <code>Ctrl + B</code><br>插入图片    <code>Ctrl + G</code><br>插入链接    <code>Ctrl + L</code><br>提升标题    <code>Ctrl + H</code></p><h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul><li>微博：<a href="http://weibo.com/u/2788354117" target="_blank" rel="noopener">@马克飞象</a>，<a href="http://weibo.com/ggock" title="开发者个人账号" target="_blank" rel="noopener">@GGock</a></li><li>邮箱：<a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#104;&#117;&#x73;&#x74;&#103;&#x6f;&#99;&#107;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#104;&#117;&#x73;&#x74;&#103;&#x6f;&#99;&#107;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#109;</a></li></ul><hr><p>感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。</p><p>[^demo]: 这是一个示例脚注。请查阅 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes" target="_blank" rel="noopener">MultiMarkdown 文档</a> 关于脚注的说明。 <strong>限制：</strong> 印象笔记的笔记内容使用 <a href="https://dev.yinxiang.com/doc/articles/enml.php" target="_blank" rel="noopener">ENML</a> 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;欢迎使用马克飞象&quot;&gt;&lt;a href=&quot;#欢迎使用马克飞象&quot; class=&quot;headerlink&quot; title=&quot;欢迎使用马克飞象&quot;&gt;&lt;/a&gt;欢迎使用马克飞象&lt;/h1&gt;&lt;p&gt;@(Pro)[马克飞象, 帮助, Markdown]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;马克飞象
      
    
    </summary>
    
      <category term="其它" scheme="https://wangfeng.pro/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="test" scheme="https://wangfeng.pro/tags/test/"/>
    
      <category term="Markdown" scheme="https://wangfeng.pro/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>单向链表基本操作</title>
    <link href="https://wangfeng.pro/a/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://wangfeng.pro/a/单向链表基本操作/</id>
    <published>2017-06-07T02:29:58.000Z</published>
    <updated>2018-01-12T12:08:31.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单向链表节点"><a href="#单向链表节点" class="headerlink" title="单向链表节点"></a>单向链表节点</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; next;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyLink</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; head = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表尾</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表的有效节点数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h1><h2 id="向链表尾部插入数据"><a href="#向链表尾部插入数据" class="headerlink" title="向链表尾部插入数据"></a>向链表尾部插入数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向链表尾部插入数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">    Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(data);</span><br><span class="line">    <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">        head = node;</span><br><span class="line">        last = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        last.next = node;</span><br><span class="line">        last = node;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向链表开头插入数据"><a href="#向链表开头插入数据" class="headerlink" title="向链表开头插入数据"></a>向链表开头插入数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向链表开头插入数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">    Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(data);</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = node;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.next = head;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向链表的指定位置插入数据"><a href="#向链表的指定位置插入数据" class="headerlink" title="向链表的指定位置插入数据"></a>向链表的指定位置插入数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向链表的指定位置插入数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E data, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(data);</span><br><span class="line">    Node&lt;E&gt; tmp = getNode(index);</span><br><span class="line">    node.next = tmp.next;</span><br><span class="line">    tmp.next = node;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取指定位置的节点数据"><a href="#获取指定位置的节点数据" class="headerlink" title="获取指定位置的节点数据"></a>获取指定位置的节点数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定位置的节点数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Node&lt;E&gt; tmp = head;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; index) &#123;</span><br><span class="line">        tmp = tmp.next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据链表头节点，反转链表"><a href="#根据链表头节点，反转链表" class="headerlink" title="根据链表头节点，反转链表"></a>根据链表头节点，反转链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据链表头节点，反转链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">Node&lt;E&gt; <span class="title">reverse</span><span class="params">(Node&lt;E&gt; head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;E&gt; prev = <span class="keyword">null</span>;</span><br><span class="line">    Node&lt;E&gt; next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        next = head.next;</span><br><span class="line">        head.next = prev;</span><br><span class="line">        prev = head;</span><br><span class="line">        head = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断链表是否有环路"><a href="#判断链表是否有环路" class="headerlink" title="判断链表是否有环路"></a>判断链表是否有环路</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断链表是否有环路</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">hasCircle</span><span class="params">(Node&lt;E&gt; head)</span> </span>&#123;</span><br><span class="line">    Node&lt;E&gt; fast = head;</span><br><span class="line">    Node&lt;E&gt; slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        <span class="keyword">if</span> (fast != <span class="keyword">null</span> &amp;&amp; fast == slow) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单向链表节点&quot;&gt;&lt;a href=&quot;#单向链表节点&quot; class=&quot;headerlink&quot; title=&quot;单向链表节点&quot;&gt;&lt;/a&gt;单向链表节点&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="算法与数据结构" scheme="https://wangfeng.pro/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://wangfeng.pro/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://wangfeng.pro/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统学习笔记</title>
    <link href="https://wangfeng.pro/a/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://wangfeng.pro/a/深入理解计算机系统学习笔记/</id>
    <published>2017-06-05T01:34:51.000Z</published>
    <updated>2018-01-12T12:08:31.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机系统中的抽象-P19"><a href="#计算机系统中的抽象-P19" class="headerlink" title="计算机系统中的抽象(P19)"></a>计算机系统中的抽象(P19)</h2><ul><li><em>文件</em>是对<strong>I/O设备</strong>的抽象；</li><li><em>虚拟内存</em>是对<strong>程序存储器</strong>的抽象；</li><li><em>进程</em>是对<strong>一个正在运行的程序</strong>的抽象；</li><li><em>虚拟机</em>是对<strong>整个计算机</strong>的抽象，包括操作系统、处理器和程序；<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/06/06/09/QQ截图20170605103222.png" alt="图例" title="">                </div>                <div class="image-caption">图例</div>            </figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;计算机系统中的抽象-P19&quot;&gt;&lt;a href=&quot;#计算机系统中的抽象-P19&quot; class=&quot;headerlink&quot; title=&quot;计算机系统中的抽象(P19)&quot;&gt;&lt;/a&gt;计算机系统中的抽象(P19)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;文件&lt;/em&gt;是对&lt;stro
      
    
    </summary>
    
      <category term="计算机原理" scheme="https://wangfeng.pro/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="操作系统" scheme="https://wangfeng.pro/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="计算机" scheme="https://wangfeng.pro/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>在SpringBoot里面使用thymeleaf3</title>
    <link href="https://wangfeng.pro/a/%E5%9C%A8SpringBoot%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8thymeleaf3/"/>
    <id>https://wangfeng.pro/a/在SpringBoot里面使用thymeleaf3/</id>
    <published>2017-05-26T01:53:26.000Z</published>
    <updated>2018-01-12T12:08:31.387Z</updated>
    
    <content type="html"><![CDATA[<p>最近在一个<code>springboot</code>项目里使用<code>thymeleaf</code>模板，访问页面时一直报错。而之前的项目中没发现过这种情况发生。<br>和之前的项目对比发现，在<code>springboot</code>项目中引入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>引入的<code>thymeleaf</code>版本居然是<code>2.x.x</code>版本，之前项目引入的是<code>3.x.x</code>版本的<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/26/10/QQ截图20170526100433.png" alt="之前项目" title="">                </div>                <div class="image-caption">之前项目</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/26/10/QQ截图20170526100404.png" alt="该项目" title="">                </div>                <div class="image-caption">该项目</div>            </figure></p><p>查看相应的pom文件发现，<code>thymeleaf.version</code>确实是<code>2.x.x</code>的。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/26/10/QQ截图20170526095909.png" alt="截图" title="">                </div>                <div class="image-caption">截图</div>            </figure><br>究竟怎么回事呢？搜索<code>springboot</code>文档中相关<code>thymeleaf</code>的段落，发现了如下<a href="http://docs.spring.io/spring-boot/docs/1.5.3.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3" target="_blank" rel="noopener">描述</a>:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/26/10/QQ截图20170526100534.png" alt="描述" title="">                </div>                <div class="image-caption">描述</div>            </figure></p><p>原来在<code>spring-boot-starter-thymeleaf</code>中默认引入的版本<code>thymeleaf</code>是<code>2.1</code>,如果需要使用<code>thymeleaf3</code>,需要在<code>pom.xml</code>中加入如下配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在一个&lt;code&gt;springboot&lt;/code&gt;项目里使用&lt;code&gt;thymeleaf&lt;/code&gt;模板，访问页面时一直报错。而之前的项目中没发现过这种情况发生。&lt;br&gt;和之前的项目对比发现，在&lt;code&gt;springboot&lt;/code&gt;项目中引入&lt;br&gt;&lt;fi
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://wangfeng.pro/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://wangfeng.pro/tags/SpringBoot/"/>
    
      <category term="thymeleaf" scheme="https://wangfeng.pro/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Runnable实现资源共享</title>
    <link href="https://wangfeng.pro/a/Runnable%E5%AE%9E%E7%8E%B0%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/"/>
    <id>https://wangfeng.pro/a/Runnable实现资源共享/</id>
    <published>2017-05-25T09:03:18.000Z</published>
    <updated>2018-01-12T12:08:31.386Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="http://www.cnblogs.com/skywang12345/p/3479063.html" target="_blank" rel="noopener">参考地址</a></strong></p><p>以抢票或秒杀为例</p><ol><li>错误示例1：</li></ol><ul><li><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> remain = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" 剩余："</span> + <span class="keyword">this</span>.remain--);</span><br><span class="line">            count.addAndGet(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line"></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(service);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">return</span> service.count.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i] = buy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> a = Arrays.stream(array).filter(i -&gt; i &gt; <span class="number">100</span>).count();</span><br><span class="line">        System.out.println(<span class="string">"执行次数大于100的个数："</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://file.wf2311.com/2017/05/25/17/QQ截图20170525171025.png" alt="截图" title="">                </div>                <div class="image-caption">截图</div>            </figure><p>执行100次中出现了13次下单次数大于100次的情况</p><ul><li>原因分析:<br>在上述方法中，多个线程共享一个变量，会存在并发争抢资源的问题，可能多买票的现象。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3479063.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考地址&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以抢票或秒杀为例&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://wangfeng.pro/categories/Java/"/>
    
    
      <category term="thread" scheme="https://wangfeng.pro/tags/thread/"/>
    
      <category term="java" scheme="https://wangfeng.pro/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>jquery checkbox选中、改变状态、change和click事件</title>
    <link href="https://wangfeng.pro/a/jquery%20checkbox%E9%80%89%E4%B8%AD%E3%80%81%E6%94%B9%E5%8F%98%E7%8A%B6%E6%80%81%E3%80%81change%E5%92%8Cclick%E4%BA%8B%E4%BB%B6/"/>
    <id>https://wangfeng.pro/a/jquery checkbox选中、改变状态、change和click事件/</id>
    <published>2017-05-25T02:55:13.000Z</published>
    <updated>2018-01-12T12:08:31.386Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/zqifa/p/jquery-checkbox-1.html" target="_blank" rel="noopener">原文</a></p><ul><li><p>jquery判断checked的三种方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.attr(<span class="string">'checked'</span>); <span class="comment">//看版本1.6+返回:”checked”或”undefined” ;1.5-返回:true或false</span></span><br><span class="line">.prop(<span class="string">'checked'</span>); <span class="comment">//1.6+:true/false</span></span><br><span class="line">.is(<span class="string">':checked'</span>); <span class="comment">//所有版本:true/false//别忘记冒号哦</span></span><br></pre></td></tr></table></figure></li><li><p>jquery赋值checked的几种写法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的jquery版本都可以这样赋值:</span></span><br><span class="line">$(<span class="string">"#cb1"</span>).attr(<span class="string">"checked"</span>, <span class="string">"checked"</span>);</span><br><span class="line">$(<span class="string">"#cb1"</span>).attr(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//jquery1.6+:prop的4种赋值:</span></span><br><span class="line">$(<span class="string">"#cb1"</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line">$(<span class="string">"#cb1"</span>).prop(&#123;<span class="attr">checked</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">$(<span class="string">"#cb1"</span>).prop(<span class="string">"checked"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//函数返回true或false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//记得还有这种哦:</span></span><br><span class="line">$(<span class="string">"#cb1″).prop("</span>checked<span class="string">","</span>checked<span class="string">");</span></span><br></pre></td></tr></table></figure></li><li><p>checkbox click和change事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1:</span></span><br><span class="line">$(<span class="string">"#ischange"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"checked"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2:</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($.browser.msie) &#123;</span><br><span class="line">        $(<span class="string">'input:checkbox'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.blur();</span><br><span class="line">            <span class="keyword">this</span>.focus();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3：</span></span><br><span class="line">$(<span class="string">"#ischange"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"checked"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法4:</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($.browser.msie) &#123;</span><br><span class="line">        $(<span class="string">'input:checkbox'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.blur();</span><br><span class="line">            <span class="keyword">this</span>.focus();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法5:</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"testCheckbox"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"Option changed!"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/zqifa/p/jquery-checkbox-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;jquery判断checked的三种方
      
    
    </summary>
    
      <category term="前端" scheme="https://wangfeng.pro/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jquery" scheme="https://wangfeng.pro/tags/jquery/"/>
    
  </entry>
  
</feed>
